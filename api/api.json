{
    "openapi": "3.0.0",
    "paths": {
      "/locks/shared-locks": {
        "get": {
          "operationId": "SharedLockController_findAll",
          "summary": "Find all user shared locks",
          "description": "Returns a list of all user shared locks",
          "parameters": [
            {
              "name": "status",
              "required": false,
              "in": "query",
              "description": "The shared lock status",
              "schema": {
                "default": "active",
                "enum": [
                  "active",
                  "archived"
                ],
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SharedLockForPublic"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Shared Locks"
          ],
          "security": [
            {
              "oauth2": [
                "shared_locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        },
        "post": {
          "operationId": "SharedLockController_create",
          "summary": "Create a shared lock",
          "description": "Creates a shared lock",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUpdateSharedLockDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateSharedLockRepDto"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Shared Locks"
          ],
          "security": [
            {
              "oauth2": [
                "shared_locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/shared-locks/{sharedLockId}": {
        "get": {
          "operationId": "SharedLockController_findOne",
          "summary": "Find a shared lock by id",
          "description": "Finds a shared lock by id",
          "parameters": [
            {
              "name": "sharedLockId",
              "required": true,
              "in": "path",
              "description": "The shared lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SharedLockForPublic"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Shared lock not found"
            }
          },
          "tags": [
            "Shared Locks"
          ],
          "security": [
            {
              "oauth2": [
                "shared_locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        },
        "put": {
          "operationId": "SharedLockController_update",
          "summary": "Update a shared lock",
          "description": "Updates a shared lock",
          "parameters": [
            {
              "name": "sharedLockId",
              "required": true,
              "in": "path",
              "description": "The shared lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUpdateSharedLockDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": ""
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Shared lock not found"
            }
          },
          "tags": [
            "Shared Locks"
          ],
          "security": [
            {
              "oauth2": [
                "shared_locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/shared-locks/{sharedLockId}/archive": {
        "post": {
          "operationId": "SharedLockController_archive",
          "summary": "Archive a shared lock",
          "description": "Archives a shared lock",
          "parameters": [
            {
              "name": "sharedLockId",
              "required": true,
              "in": "path",
              "description": "The shared lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": ""
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Shared lock not found"
            }
          },
          "tags": [
            "Shared Locks"
          ],
          "security": [
            {
              "oauth2": [
                "shared_locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks": {
        "get": {
          "operationId": "LockController_findAll",
          "summary": "Get user locks",
          "description": "Returns a list of all user locks\n\nBy default, only active locks are returned.",
          "parameters": [
            {
              "name": "status",
              "required": false,
              "in": "query",
              "description": "The lock status",
              "schema": {
                "default": "active",
                "enum": [
                  "active",
                  "archived",
                  "all"
                ],
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LockForPublic"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        },
        "post": {
          "operationId": "LockCreationController_create",
          "summary": "Create a lock",
          "description": "Creates a personal lock. To create a lock, you must first create\na combination by using the combination endpoints, and then provide its identifier.",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLockDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockCreatedRepDto"
                  }
                }
              }
            },
            "400": {
              "description": "You must be a Plus member to add more extensions"
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Lock Creation"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}": {
        "get": {
          "operationId": "LockController_findOne",
          "summary": "Get a lock by id",
          "description": "Returns a lock by id",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockForPublic"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/archive": {
        "post": {
          "operationId": "LockController_archive",
          "summary": "Archive a lock",
          "description": "Archives a lock as a wearer. A wearer can archive its own lock:\n<ul>\n<li>If the lock is running (status `locked`), the lock will become deserted (status `deserted`),\nwith no possibility of going back.</li>\n<li>If the lock is unlocked, the lock will simply be archived.</li>\n</ul>",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": ""
            },
            "401": {
              "description": "Not authorized"
            },
            "403": {
              "description": "Cannot archive the lock as a non-wearer"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/archive/keyholder": {
        "post": {
          "operationId": "LockController_archiveKeyholder",
          "summary": "Archive a lock as a keyholder",
          "description": "Archives a lock as a keyholder. Keyholders can use this endpoint to archive unlocked locks.",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": ""
            },
            "401": {
              "description": "Not authorized"
            },
            "403": {
              "description": "Cannot archive the lock as a non-keyholder"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/update-time": {
        "post": {
          "operationId": "LockController_updateTime",
          "summary": "Update lock duration",
          "description": "Adds or removes duration to a lock. Keyholders can add or remove time, while wearers can only add time.",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTimeDto"
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": ""
            },
            "400": {
              "description": "Cannot change an non-locked lock"
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/freeze": {
        "post": {
          "operationId": "LockController_setFreeze",
          "summary": "Freeze a lock",
          "description": "Freezes a lock. Keyholders can use this endpoint to freeze wearer's locks.",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetFreezeDto"
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": ""
            },
            "400": {
              "description": "Cannot change an non-locked lock"
            },
            "401": {
              "description": "Not authorized"
            },
            "403": {
              "description": "The lock cannot be edited (wearer)"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/unlock": {
        "post": {
          "operationId": "LockController_unlock",
          "summary": "Unlock a lock",
          "description": "Unlocks a lock. For wearers, the lock must respect certain constraints so that it can be unlocked.",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": ""
            },
            "400": {
              "description": "Some extensions prevent the unlocking of the lock"
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/settings": {
        "post": {
          "operationId": "LockController_setSettings",
          "summary": "Update lock settings",
          "description": "Update locks settings. Only the keyholder can update lock settings.",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLockSettingsDto"
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": ""
            },
            "400": {
              "description": "Cannot change an non-locked lock"
            },
            "401": {
              "description": "Not authorized"
            },
            "403": {
              "description": "The lock cannot be edited (wearer)"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/max-limit-date": {
        "post": {
          "operationId": "LockController_setMaxLimitDate",
          "summary": "Increase the max limit date",
          "description": "Increase the max limit date. Only the wearer can increase the limit.",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncreaseMaxLimitDateDto"
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "anyOf": [
                      {
                        "description": "Cannot change an non-locked lock"
                      },
                      {
                        "description": "Cannot define a limit to a lock that has no time limit"
                      }
                    ]
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            },
            "403": {
              "description": "The lock cannot be edited (keyholder)"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/trust-keyholder": {
        "post": {
          "operationId": "LockController_trustKeyholder",
          "summary": "Trust the keyholder",
          "description": "Trust the keyholder. Only the wearer can trust the keyholder.",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "anyOf": [
                      {
                        "description": "Cannot change an non-locked lock"
                      },
                      {
                        "description": "The lock does not have a keyholder"
                      }
                    ]
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            },
            "403": {
              "description": "The lock cannot be edited (keyholder)"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/combination": {
        "get": {
          "operationId": "LockController_combination",
          "summary": "Find a lock combination",
          "description": "Finds a lock combination",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CombinationForPublic"
                  }
                }
              }
            },
            "400": {
              "description": "Cannot get a combination for a locked lock"
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/history": {
        "post": {
          "operationId": "LockController_getLockHistory",
          "summary": "Return lock history",
          "description": "Returns a list of action logs",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLockHistoryDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetHistoryRepDto"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/user/{userId}": {
        "get": {
          "operationId": "LockVisitorController_getUserLocks",
          "summary": "Return the public locks of a user",
          "description": "Returns the public locks of a user",
          "parameters": [
            {
              "name": "userId",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LockForPublic"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Profile"
          ]
        }
      },
      "/files/upload": {
        "post": {
          "operationId": "StorageController_uploadFiles",
          "summary": "Upload attachments",
          "description": "Upload attachments and get an attachment token to be used in messaging and posts\n\nThe attachment token expires after one hour.",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFilesDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UploadFilesRepDto"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Files"
          ],
          "security": [
            {
              "oauth2": []
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/files/{fileKey}": {
        "get": {
          "operationId": "StorageController_getFileFromKey",
          "summary": "Find a file",
          "description": "",
          "parameters": [
            {
              "name": "fileKey",
              "required": true,
              "in": "path",
              "description": "The file key",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetFileFromKeyRepDto"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Files"
          ],
          "security": [
            {
              "oauth2": []
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/combinations/image": {
        "post": {
          "operationId": "CombinationController_uploadImage",
          "summary": "Upload a combination image",
          "description": "Uploads an image and stores the combination. Once the image is uploaded,\nit cannot be recovered without being associated with a lock. To retrieve\nthe combination, refer to the endpoint `/locks/{lockId}/combination` to\nget the image URL.\n\nIf the combination is not associated with a lock, it expires after one hour.",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UploadCombinationImageDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateCodeRepDto"
                  }
                }
              }
            },
            "401": {
              "description": "The user is not a Premium user"
            }
          },
          "tags": [
            "Combinations"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/combinations/code": {
        "post": {
          "operationId": "CombinationController_createCode",
          "summary": "Create a code combination",
          "description": "Creates and stores the code combination. Once the code is sent, it cannot\nbe recovered without being associated with a lock. To retrieve the\ncombination, refer to the endpoint `/locks/{lockId}/combination` to get\nthe code.\n\nIf the combination is not associated with a lock, it expires after one hour.",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCodeDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateCodeRepDto"
                  }
                }
              }
            }
          },
          "tags": [
            "Combinations"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/users/profile/by-id/{userId}": {
        "get": {
          "operationId": "ProfileController_getUserById",
          "summary": "Find a user by id",
          "description": "",
          "parameters": [
            {
              "name": "userId",
              "required": true,
              "in": "path",
              "description": "The user id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserForPublic"
                  }
                }
              }
            },
            "404": {
              "description": "User not found"
            }
          },
          "tags": [
            "Profile"
          ]
        }
      },
      "/users/profile/{username}": {
        "get": {
          "operationId": "ProfileController_getUser",
          "summary": "Find a user profile",
          "description": "",
          "parameters": [
            {
              "name": "username",
              "required": true,
              "in": "path",
              "description": "The username",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserForPublic"
                  }
                }
              }
            },
            "404": {
              "description": "User not found"
            }
          },
          "tags": [
            "Profile"
          ]
        }
      },
      "/users/profile/{username}/details": {
        "get": {
          "operationId": "ProfileController_getUserProfile",
          "summary": "Find a user profile with details",
          "description": "",
          "parameters": [
            {
              "name": "username",
              "required": true,
              "in": "path",
              "description": "The username",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProfileRepDto"
                  }
                }
              }
            },
            "404": {
              "description": "User not found"
            }
          },
          "tags": [
            "Profile"
          ]
        }
      },
      "/extensions": {
        "get": {
          "operationId": "ExtensionListController_getExtensions",
          "summary": "Get the list of extensions",
          "description": "Returns the list of all extensions in memory",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExtensionForPublic"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Extensions"
          ]
        }
      },
      "/session-offer/lock/{lockId}": {
        "post": {
          "operationId": "SessionOfferController_createKeyholdingOffer",
          "summary": "Create a keyholding offer",
          "description": "Allows the wearer to send a keyholding request to another user.",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOfferRequestDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": ""
            },
            "400": {
              "description": "You cannot be your own keyholder."
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Session Offer"
          ],
          "security": [
            {
              "bearer": []
            },
            {
              "oauth2": [
                "locks"
              ]
            }
          ]
        }
      },
      "/session-offer/token/{offerToken}/accept": {
        "get": {
          "operationId": "SessionOfferController_acceptKeyholdingRequest",
          "summary": "Accept a keyholding request",
          "description": "Accepts a keyholding request from a wearer. By accepting the request, you will become the keyholder. The `offerToken` parameter can be found in the `LockForPublic` object, if the user has enabled this option when creating the lock.",
          "parameters": [
            {
              "name": "offerToken",
              "required": true,
              "in": "path",
              "description": "The lock offer token",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "You cannot be your own keyholder."
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Session Offer"
          ],
          "security": [
            {
              "bearer": []
            },
            {
              "oauth2": [
                "keyholder"
              ]
            }
          ]
        }
      },
      "/session-offer/lock/{lockId}/status": {
        "get": {
          "operationId": "SessionOfferController_getOfferRequestStatus",
          "summary": "Return a list of keyholding offers",
          "description": "Returns a list of keyholding offers",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SessionOfferRequestForPublic"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Session Offer"
          ],
          "security": [
            {
              "bearer": []
            },
            {
              "oauth2": [
                "locks"
              ]
            }
          ]
        }
      },
      "/session-offer/token/{offerToken}": {
        "get": {
          "operationId": "SessionOfferController_getLockKeyholdingRequest",
          "summary": "Retrive public information of a lock",
          "description": "Retrieves public information of the lock for the visitor who received a keyholding request link",
          "parameters": [
            {
              "name": "offerToken",
              "required": true,
              "in": "path",
              "description": "The keyholding request token",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockForPublic"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Lock not found"
            }
          },
          "tags": [
            "Session Offer"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/session-offer/{sessionRequestId}": {
        "post": {
          "operationId": "SessionOfferController_validateOfferRequest",
          "summary": "Accept or reject a keyholding offer from a wearer",
          "description": "Accepts or reject a keyholding offer sent directly by a wearer",
          "parameters": [
            {
              "name": "sessionRequestId",
              "required": true,
              "in": "path",
              "description": "The keyholding offer id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateOfferRequestDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": ""
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Session offer request not found."
            }
          },
          "tags": [
            "Session Offer"
          ],
          "security": [
            {
              "bearer": []
            },
            {
              "oauth2": [
                "keyholder"
              ]
            }
          ]
        }
      },
      "/session-offer/{sessionRequestId}/archive": {
        "get": {
          "operationId": "SessionOfferController_archiveKeyholdingOffer",
          "summary": "Archive a keyholding offer",
          "description": "Archives a keyholding offer. If the offer is pending, it cancels the keyholding offer.",
          "parameters": [
            {
              "name": "sessionRequestId",
              "required": true,
              "in": "path",
              "description": "The keyholding offer id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Session offer request not found."
            }
          },
          "tags": [
            "Session Offer"
          ],
          "security": [
            {
              "bearer": []
            },
            {
              "oauth2": [
                "locks"
              ]
            }
          ]
        }
      },
      "/session-offer/requests": {
        "get": {
          "operationId": "SessionOfferController_getKeyholderRequests",
          "summary": "Return keyholding offers from wearers",
          "description": "Returns keyholding offers from wearers",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SessionOfferRequestForKeyholder"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Session Offer"
          ],
          "security": [
            {
              "bearer": []
            },
            {
              "oauth2": [
                "keyholder"
              ]
            }
          ]
        }
      },
      "/users/badge/count": {
        "get": {
          "operationId": "UserBadgeController_getUserBadgeCount",
          "summary": "Get the user badge count",
          "description": "Returns the user badge count",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserBadgeCount"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "oauth2": []
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/conversations": {
        "get": {
          "operationId": "MessagingController_getConversations",
          "summary": "Find a list of conversations",
          "description": "Finds a list of conversations",
          "parameters": [
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "description": "The query limit",
              "schema": {
                "minimum": 1,
                "maximum": 100,
                "default": 50,
                "type": "number"
              }
            },
            {
              "name": "status",
              "required": false,
              "in": "query",
              "description": "The conversation status",
              "schema": {
                "default": "approved",
                "enum": [
                  "pending",
                  "approved",
                  "ignored"
                ],
                "type": "string"
              }
            },
            {
              "name": "offset",
              "required": false,
              "in": "query",
              "description": "The query offset, date of last message\n\nUse the field lastMessageAt for pagination",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetConversationsRepDto"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Messaging"
          ],
          "security": [
            {
              "oauth2": [
                "messaging"
              ]
            },
            {
              "bearer": []
            }
          ]
        },
        "post": {
          "operationId": "MessagingController_createConversation",
          "summary": "Create a conversation",
          "description": "Creates a conversation",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConversationDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConversationForPublic"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Messaging"
          ],
          "security": [
            {
              "oauth2": [
                "messaging"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/conversations/by-user/{userId}": {
        "get": {
          "operationId": "MessagingController_getConversationByUserId",
          "summary": "Find conversation by user id",
          "description": "Finds a conversation by user id",
          "parameters": [
            {
              "name": "userId",
              "required": true,
              "in": "path",
              "description": "The user id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConversationForPublic"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Messaging"
          ],
          "security": [
            {
              "oauth2": [
                "messaging"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/conversations/{conversationId}": {
        "post": {
          "operationId": "MessagingController_sendMessage",
          "summary": "Add a new message in a conversation",
          "description": "Updates a conversation",
          "parameters": [
            {
              "name": "conversationId",
              "required": true,
              "in": "path",
              "description": "The conversation id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateConversationDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessageForPublic"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Messaging"
          ],
          "security": [
            {
              "oauth2": [
                "messaging"
              ]
            },
            {
              "bearer": []
            }
          ]
        },
        "get": {
          "operationId": "MessagingController_getConversation",
          "summary": "Find a conversation",
          "description": "Finds a conversation",
          "parameters": [
            {
              "name": "conversationId",
              "required": true,
              "in": "path",
              "description": "The conversation id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConversationForPublic"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Messaging"
          ],
          "security": [
            {
              "oauth2": [
                "messaging"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/conversations/{conversationId}/status": {
        "put": {
          "operationId": "MessagingController_setConversationStatus",
          "summary": "Set a conversation status",
          "description": "Updates a conversation status",
          "parameters": [
            {
              "name": "conversationId",
              "required": true,
              "in": "path",
              "description": "The conversation id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetConversationStatusDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": ""
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Messaging"
          ],
          "security": [
            {
              "oauth2": [
                "messaging"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/conversations/{conversationId}/unread": {
        "put": {
          "operationId": "MessagingController_setConversationUnread",
          "summary": "Set a conversation unread status",
          "description": "Updates a conversation unread status",
          "parameters": [
            {
              "name": "conversationId",
              "required": true,
              "in": "path",
              "description": "The conversation id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetConversationUnreadDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": ""
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Messaging"
          ],
          "security": [
            {
              "oauth2": [
                "messaging"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/conversations/{conversationId}/messages": {
        "get": {
          "operationId": "MessagingController_getMessages",
          "summary": "Find messages in a conversation",
          "description": "Finds messages in a conversation",
          "parameters": [
            {
              "name": "conversationId",
              "required": true,
              "in": "path",
              "description": "The conversation id",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "description": "The query limit",
              "schema": {
                "minimum": 1,
                "maximum": 100,
                "default": 50,
                "type": "number"
              }
            },
            {
              "name": "lastId",
              "required": false,
              "in": "query",
              "description": "Last message id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetMessagesRepDto"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Messaging"
          ],
          "security": [
            {
              "oauth2": [
                "messaging"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/extensions/{extensionId}": {
        "get": {
          "operationId": "LockExtensionController_getLockInfoFromExtension",
          "summary": "Get information from an extension for a given lock",
          "description": "",
          "parameters": [
            {
              "name": "extensionId",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetLockInfoFromExtensionRepDto"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": []
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/extensions/{extensionId}/action": {
        "post": {
          "operationId": "LockExtensionController_triggerAction",
          "summary": "Trigger an action for a lock extension",
          "description": "Triggers an action in a lock extension",
          "parameters": [
            {
              "name": "extensionId",
              "required": true,
              "in": "path",
              "description": "The extension party id",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerExtensionActionDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Locks"
          ],
          "security": [
            {
              "oauth2": []
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/extensions/temporary-opening/{lockId}/combination": {
        "get": {
          "operationId": "TemporaryOpeningExtensionController_getCombination",
          "summary": "Get a lock combination",
          "description": "Returns the lock combination\n\nThis endpoint only works if the lock is temporarily unlocked by the temporary opening extension",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CombinationForPublic"
                  }
                }
              }
            }
          },
          "tags": [
            "Extensions - Temporary Opening"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        },
        "post": {
          "operationId": "TemporaryOpeningExtensionController_setCombination",
          "summary": "Set the new combination",
          "description": "Updates the lock combination\n\nThis endpoint only works if the lock is temporarily unlocked by the temporary opening extension",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemporaryOpeningSetCombinationDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": ""
            }
          },
          "tags": [
            "Extensions - Temporary Opening"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/extensions/temporary-opening/{lockId}/action-log/{actionLogId}/combination": {
        "get": {
          "operationId": "TemporaryOpeningExtensionController_getCombinationFromHistoryEntry",
          "summary": "Find a combination from an action log",
          "description": "Finds a lock combination from a previous temporary opening",
          "parameters": [
            {
              "name": "actionLogId",
              "required": true,
              "in": "path",
              "description": "The action log id",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CombinationForPublic"
                  }
                }
              }
            }
          },
          "tags": [
            "Extensions - Temporary Opening"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/community-event/categories": {
        "get": {
          "operationId": "CommunityEventController_getCategories",
          "summary": "Get community event categories",
          "description": "",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CommunityEventCategory"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Community Events"
          ],
          "security": [
            {
              "oauth2": []
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/community-event/details": {
        "post": {
          "operationId": "CommunityEventController_getPeriodDetails",
          "summary": "Get community event task details for a given day",
          "description": "",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPeriodDetailsDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPeriodDetailsRepDto"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Community Events"
          ],
          "security": [
            {
              "oauth2": []
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/extensions": {
        "post": {
          "operationId": "LockCreationController_setLockExtensions",
          "summary": "Edit lock extensions",
          "description": "Edit extensions for a given lock.\n\nKeyholders can edit extensions if the lock is trusted by the wearer.",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditLockExtensionsDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": ""
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Lock Creation"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/public-locks/{sharedLockId}/create-lock": {
        "post": {
          "operationId": "LockCreationController_createLockFromSharedLock",
          "summary": "Create a lock from a shared lock",
          "description": "Creates a lock from a shared lock. To create a lock, you must first\ncreate a combination and then provide its identifier.",
          "parameters": [
            {
              "name": "sharedLockId",
              "required": true,
              "in": "path",
              "description": "Shared lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLockFromSharedLockDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LockCreatedRepDto"
                  }
                }
              }
            },
            "400": {
              "description": "You cannot add yourself to your own lock."
            },
            "401": {
              "description": "Not authorized"
            },
            "403": {
              "description": "Invalid password."
            },
            "404": {
              "description": "Shared lock not found."
            }
          },
          "tags": [
            "Lock Creation"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/settings": {
        "get": {
          "operationId": "SettingsController_getAppSettings",
          "summary": "Get app settings",
          "description": "",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AppSettingsDto"
                  }
                }
              }
            }
          },
          "tags": [
            "Settings"
          ]
        }
      },
      "/auth/profile/update": {
        "get": {
          "operationId": "AuthMeController_meEdit",
          "summary": "Update profile from the authentication server",
          "description": "",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CurrentUserForProfileSettings"
                  }
                }
              }
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "oauth2": []
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/auth/profile": {
        "get": {
          "operationId": "AuthMeController_me",
          "summary": "Get logged user information",
          "description": "",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CurrentUser"
                  }
                }
              }
            }
          },
          "tags": [
            "Profile"
          ],
          "security": [
            {
              "oauth2": []
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/users/search/by-username": {
        "post": {
          "operationId": "UserSearchController_searchByUsername",
          "summary": "Search a user by its username",
          "description": "",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUserUsernameDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UserForPublic"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Users"
          ],
          "security": [
            {
              "oauth2": []
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/users/search/by-discord-id/{discordId}": {
        "get": {
          "operationId": "UserSearchController_getUserByDiscordId",
          "summary": "Search a user by its Discord id",
          "description": "",
          "parameters": [
            {
              "name": "discordId",
              "required": true,
              "in": "path",
              "description": "The user Discord id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserForPublic"
                  }
                }
              }
            },
            "404": {
              "description": "User not found"
            }
          },
          "tags": [
            "Users"
          ],
          "security": [
            {
              "oauth2": []
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/keyholder/wearers": {
        "get": {
          "operationId": "KeyholderController_getKeyholderWearers",
          "summary": "Return all locked users",
          "description": "Use POST /keyholder/locks/search",
          "deprecated": true,
          "parameters": [
            {
              "name": "status",
              "required": false,
              "in": "query",
              "description": "Filter by lock status",
              "schema": {
                "enum": [
                  "locked",
                  "unlocked",
                  "deserted",
                  "archived"
                ],
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LockForKeyholder"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Keyholder"
          ],
          "security": [
            {
              "oauth2": [
                "keyholder"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/keyholder/locks/search": {
        "post": {
          "operationId": "KeyholderController_searchLocks",
          "summary": "Search locked users",
          "description": "Search locked users",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyholderSearchLocksDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KeyholderSearchLocksRepDto"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Keyholder"
          ],
          "security": [
            {
              "oauth2": [
                "keyholder"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/reports": {
        "post": {
          "operationId": "ReportCreationController_createReport",
          "summary": "Create a report",
          "description": "Create a report",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateReportDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": ""
            }
          },
          "tags": [
            "Reports"
          ],
          "security": [
            {
              "oauth2": []
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/public-locks/{sharedLockId}": {
        "get": {
          "operationId": "PublicLockController_findOne",
          "summary": "Find a public shared lock",
          "description": "Finds a public shared lock",
          "parameters": [
            {
              "name": "sharedLockId",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PublicLockForPublic"
                  }
                }
              }
            },
            "404": {
              "description": "Shared lock not found"
            }
          },
          "tags": [
            "Public Locks"
          ]
        }
      },
      "/public-locks/images/{sharedLockId}": {
        "get": {
          "operationId": "PublicLockController_getSharedLockImage",
          "summary": "Generate a shared lock image",
          "description": "Generates an image illustrating the shared lock, to publish it on forums or social networks.",
          "parameters": [
            {
              "name": "sharedLockId",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Shared lock not found"
            }
          },
          "tags": [
            "Public Locks"
          ],
          "security": [
            {
              "bearer": []
            }
          ]
        }
      },
      "/public-locks/search": {
        "post": {
          "operationId": "PublicLockController_search",
          "summary": "Search for locks",
          "description": "Search for locks",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPublicLockDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SearchPublicLockRepDto"
                  }
                }
              }
            }
          },
          "tags": [
            "Public Locks"
          ]
        }
      },
      "/explore/categories": {
        "get": {
          "operationId": "PublicLockExploreController_findAll",
          "summary": "Find Explore page locks",
          "description": "Returns the locks of the Explore page",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExploreCategoryForPublic"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Public Locks"
          ]
        }
      },
      "/shared-locks/{sharedLockId}/favorite": {
        "get": {
          "operationId": "SharedLockFavoriteController_isFavorite",
          "summary": "Check if the shared lock is in user favorites",
          "description": "",
          "parameters": [
            {
              "name": "sharedLockId",
              "required": true,
              "in": "path",
              "description": "The shared lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IsFavoriteSharedLockRepDto"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Shared Locks"
          ],
          "security": [
            {
              "oauth2": [
                "shared_locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        },
        "put": {
          "operationId": "SharedLockFavoriteController_setFavorite",
          "summary": "Set a shared lock as favorite",
          "description": "",
          "parameters": [
            {
              "name": "sharedLockId",
              "required": true,
              "in": "path",
              "description": "The shared lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Shared Locks"
          ],
          "security": [
            {
              "oauth2": [
                "shared_locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        },
        "delete": {
          "operationId": "SharedLockFavoriteController_removeFavorite",
          "summary": "Remove a favorite shared lock",
          "description": "",
          "parameters": [
            {
              "name": "sharedLockId",
              "required": true,
              "in": "path",
              "description": "The shared lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Shared Locks"
          ],
          "security": [
            {
              "oauth2": [
                "shared_locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/favorites/shared-locks": {
        "post": {
          "operationId": "SharedLockFavoritesController_getFavoriteSharedLocks",
          "summary": "Get user favorite shared locks",
          "description": "",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFavoriteSharedLocksDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetFavoriteSharedLocksRepDto"
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            }
          },
          "tags": [
            "Shared Locks"
          ],
          "security": [
            {
              "oauth2": [
                "shared_locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/extensions/verification-picture/{lockId}/submit": {
        "post": {
          "operationId": "VerificationPictureController_submitPicture",
          "summary": "Submit a verification picture",
          "description": "Uploads a new verification picture\n\nA user can upload a picture only if there is an existing request.",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": ""
            }
          },
          "tags": [
            "Extensions - Verification Picture"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      },
      "/locks/{lockId}/verification-pictures": {
        "get": {
          "operationId": "VerificationPictureController_getVerificationPictures",
          "summary": "Get the history of verification pictures",
          "description": "",
          "parameters": [
            {
              "name": "lockId",
              "required": true,
              "in": "path",
              "description": "The lock id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/VerificationPictureHistoryEntry"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "Extensions - Verification Picture"
          ],
          "security": [
            {
              "oauth2": [
                "locks"
              ]
            },
            {
              "bearer": []
            }
          ]
        }
      }
    },
    "info": {
      "title": "Chaster",
      "description": "Chaster Public API\n\nAPI documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction)\n",
      "version": "0.12.54",
      "contact": {}
    },
    "tags": [],
    "servers": [
      {
        "url": "https://api.chaster.app"
      }
    ],
    "components": {
      "securitySchemes": {
        "bearer": {
          "scheme": "bearer",
          "bearerFormat": "JWT",
          "type": "http"
        },
        "oauth2": {
          "type": "oauth2",
          "flows": {
            "authorizationCode": {
              "authorizationUrl": "https://sso.chaster.app/auth/realms/app/protocol/openid-connect/auth",
              "tokenUrl": "https://sso.chaster.app/auth/realms/app/protocol/openid-connect/token",
              "refreshUrl": "https://sso.chaster.app/auth/realms/app/protocol/openid-connect",
              "scopes": {
                "profile": "Profile",
                "email": "Email",
                "locks": "Locks",
                "shared_locks": "SharedLocks",
                "keyholder": "Keyholder",
                "messaging": "Messaging",
                "developer": "Developer"
              }
            }
          }
        },
        "clientId": {
          "type": "apiKey",
          "in": "header",
          "name": "X-Chaster-Client-Id",
          "description": "Your application id"
        },
        "clientSecret": {
          "type": "apiKey",
          "in": "header",
          "name": "X-Chaster-Client-Secret",
          "description": "Your application secret key"
        }
      },
      "schemas": {
        "SharedLockDurationModeEnum": {
          "type": "string",
          "enum": [
            "duration",
            "date"
          ]
        },
        "UserRoleEnum": {
          "type": "string",
          "enum": [
            "keyholder",
            "wearer",
            "switch",
            "unspecified"
          ]
        },
        "FeatureSwitchEnum": {
          "type": "string",
          "enum": [
            "partner_extensions",
            "can_join_shared_lock_status",
            "other",
            "dummy_1",
            "dummy_2",
            "dummy_3"
          ]
        },
        "UserMetadata": {
          "type": "object",
          "properties": {
            "locktober2020Points": {
              "type": "number"
            },
            "locktober2021Points": {
              "type": "number"
            },
            "chastityMonth2022Points": {
              "type": "number"
            },
            "locktober2022Points": {
              "type": "number"
            }
          },
          "required": [
            "locktober2020Points",
            "locktober2021Points",
            "chastityMonth2022Points",
            "locktober2022Points"
          ]
        },
        "UserForPublic": {
          "type": "object",
          "properties": {
            "role": {
              "description": "The role",
              "$ref": "#/components/schemas/UserRoleEnum"
            },
            "features": {
              "description": "Enabled features",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FeatureSwitchEnum"
              }
            },
            "_id": {
              "type": "string",
              "description": "The user id"
            },
            "username": {
              "type": "string",
              "description": "The username"
            },
            "isPremium": {
              "type": "boolean",
              "description": "Whether the user has a Premium subscription"
            },
            "description": {
              "type": "string",
              "description": "The profile description"
            },
            "location": {
              "type": "string",
              "description": "The location"
            },
            "gender": {
              "type": "string",
              "description": "The gender"
            },
            "age": {
              "type": "number",
              "description": "The age"
            },
            "isFindom": {
              "type": "boolean",
              "description": "Whether the user is a findom"
            },
            "avatarUrl": {
              "type": "string",
              "description": "The avatar URL"
            },
            "online": {
              "type": "boolean",
              "description": "Whether the user is online"
            },
            "lastSeen": {
              "type": "number",
              "nullable": true,
              "description": "User last seen, in seconds"
            },
            "isAdmin": {
              "type": "boolean",
              "description": "Whether the user is an admin"
            },
            "isModerator": {
              "type": "boolean",
              "description": "Whether the user is a moderator"
            },
            "metadata": {
              "description": "User metadata",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserMetadata"
                }
              ]
            },
            "fullLocation": {
              "type": "string",
              "description": "User full location"
            },
            "discordId": {
              "type": "string",
              "description": "The Discord ID"
            },
            "discordUsername": {
              "type": "string",
              "description": "The Discord username"
            },
            "isDisabled": {
              "type": "boolean",
              "description": "Whether the user is disabled"
            },
            "isSuspended": {
              "type": "boolean",
              "description": "Whether the user is suspended by the Chaster team"
            },
            "joinedAt": {
              "type": "string",
              "description": "Joined date (year and month, YYYY-MM)"
            },
            "isNewMember": {
              "type": "boolean",
              "description": "Whether the user is a new member"
            },
            "isSuspendedOrDisabled": {
              "type": "boolean",
              "description": "Whether the user is suspended or disabled"
            }
          },
          "required": [
            "role",
            "features",
            "_id",
            "username",
            "isPremium",
            "description",
            "location",
            "gender",
            "isFindom",
            "avatarUrl",
            "online",
            "lastSeen",
            "isAdmin",
            "isModerator",
            "metadata",
            "fullLocation",
            "isDisabled",
            "isSuspended",
            "joinedAt",
            "isNewMember",
            "isSuspendedOrDisabled"
          ]
        },
        "UnsplashPhoto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "username",
            "name",
            "url"
          ]
        },
        "ExtensionConfigForPublic": {
          "type": "object",
          "properties": {
            "slug": {
              "type": "string",
              "description": "The extension slug. "
            },
            "config": {
              "type": "object",
              "description": "The extension configuration. "
            },
            "name": {
              "type": "string"
            },
            "textConfig": {
              "type": "string"
            },
            "mode": {
              "type": "string",
              "enum": [
                "cumulative",
                "non_cumulative",
                "turn",
                "unlimited"
              ]
            },
            "regularity": {
              "type": "number",
              "minimum": 0
            }
          },
          "required": [
            "slug",
            "config",
            "name",
            "mode",
            "regularity"
          ]
        },
        "LockStatusEnum": {
          "type": "string",
          "enum": [
            "locked",
            "unlocked",
            "deserted"
          ]
        },
        "SharedLockForPublic": {
          "type": "object",
          "properties": {
            "durationMode": {
              "description": "Duration mode",
              "$ref": "#/components/schemas/SharedLockDurationModeEnum"
            },
            "_id": {
              "type": "string",
              "description": "The shared lock id"
            },
            "minDuration": {
              "type": "number",
              "description": "The minimum duration, in seconds"
            },
            "maxDuration": {
              "type": "number",
              "description": "The maximum duration, in seconds"
            },
            "calculatedMaxLimitDuration": {
              "type": "number",
              "nullable": true,
              "description": "The calculated max limit duration"
            },
            "user": {
              "description": "The creator",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserForPublic"
                }
              ]
            },
            "unsplashPhoto": {
              "nullable": true,
              "description": "The Unsplash photo",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UnsplashPhoto"
                }
              ]
            },
            "extensions": {
              "description": "Extension configurations",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtensionConfigForPublic"
              }
            },
            "createdAt": {
              "type": "string",
              "description": "Created at"
            },
            "updatedAt": {
              "type": "string",
              "nullable": true,
              "description": "Updated at"
            },
            "deletedAt": {
              "type": "string",
              "nullable": true,
              "description": "Deleted at"
            },
            "archivedAt": {
              "type": "string",
              "nullable": true,
              "description": "Archived at"
            },
            "locks": {
              "description": "List of locks\n\nOnly returned in shared locks endpoints",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockForPublic"
              }
            },
            "requirePassword": {
              "type": "boolean",
              "description": "Whether the lock requires a password"
            },
            "password": {
              "type": "string",
              "nullable": true,
              "description": "Password"
            },
            "maxLimitDuration": {
              "type": "number",
              "nullable": true,
              "description": "The maximum duration of the lock, in seconds\n\nAfter this duration, the wearer can release themself\nregardless of the timer or extension restrictions."
            },
            "minDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The minimum date"
            },
            "maxDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The maximum date"
            },
            "maxLimitDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The maximum date of the lock\n\nAfter this date, the wearer can release themself\nregardless of the timer or extension restrictions."
            },
            "displayRemainingTime": {
              "type": "boolean",
              "description": "Whether the remaining time should be displayed to the wearer"
            },
            "limitLockTime": {
              "type": "boolean",
              "description": "Whether the lock is limited in time"
            },
            "maxLockedUsers": {
              "type": "number",
              "nullable": true,
              "description": "The number of maximum locked users for this shared lock",
              "minimum": 1
            },
            "isPublic": {
              "type": "boolean",
              "description": "Whether the lock is public"
            },
            "requireContact": {
              "type": "boolean",
              "description": "Whether the shared lock requires contact from wearer\n\nDisplayed for information purposes only on the lock page"
            },
            "name": {
              "type": "string",
              "description": "The name"
            },
            "description": {
              "type": "string",
              "description": "The description"
            },
            "hideTimeLogs": {
              "type": "boolean",
              "description": "Whether the time information should be hidden from the history"
            },
            "lastSavedAt": {
              "format": "date-time",
              "type": "string",
              "description": "Last saved at"
            }
          },
          "required": [
            "durationMode",
            "_id",
            "minDuration",
            "maxDuration",
            "calculatedMaxLimitDuration",
            "user",
            "unsplashPhoto",
            "extensions",
            "createdAt",
            "updatedAt",
            "deletedAt",
            "archivedAt",
            "requirePassword",
            "password",
            "maxLimitDuration",
            "minDate",
            "maxDate",
            "maxLimitDate",
            "displayRemainingTime",
            "limitLockTime",
            "maxLockedUsers",
            "isPublic",
            "requireContact",
            "name",
            "description",
            "hideTimeLogs",
            "lastSavedAt"
          ]
        },
        "ExtensionPartyForPublic": {
          "type": "object",
          "properties": {
            "slug": {
              "type": "string",
              "description": "The extension slug. "
            },
            "config": {
              "type": "object",
              "description": "The extension configuration. "
            },
            "_id": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "summary": {
              "type": "string"
            },
            "subtitle": {
              "type": "string"
            },
            "icon": {
              "type": "string"
            },
            "mode": {
              "type": "string",
              "enum": [
                "cumulative",
                "non_cumulative",
                "turn",
                "unlimited"
              ]
            },
            "regularity": {
              "type": "number"
            },
            "userData": {
              "type": "object"
            },
            "nbActionsRemaining": {
              "type": "number"
            },
            "nextActionDate": {
              "type": "string"
            },
            "isPartner": {
              "type": "boolean"
            },
            "textConfig": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "description": "Created at"
            },
            "updatedAt": {
              "type": "string",
              "description": "Updated at"
            }
          },
          "required": [
            "slug",
            "config",
            "_id",
            "displayName",
            "summary",
            "subtitle",
            "icon",
            "mode",
            "regularity",
            "userData",
            "nbActionsRemaining",
            "nextActionDate",
            "isPartner",
            "textConfig",
            "createdAt",
            "updatedAt"
          ]
        },
        "ExtensionHomeActionWithPartyId": {
          "type": "object",
          "properties": {
            "extensionPartyId": {
              "type": "string"
            },
            "slug": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "icon": {
              "type": "string"
            },
            "badge": {
              "type": "string"
            }
          },
          "required": [
            "extensionPartyId",
            "slug",
            "title",
            "description",
            "icon"
          ]
        },
        "ReasonPreventingUnlocking": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string"
            },
            "icon": {
              "type": "string"
            }
          },
          "required": [
            "reason",
            "icon"
          ]
        },
        "VerificationPictureItem": {
          "type": "object",
          "properties": {
            "imageFile": {
              "type": "string"
            },
            "imageKey": {
              "type": "string"
            },
            "submittedAt": {
              "format": "date-time",
              "type": "string"
            },
            "verificationCode": {
              "type": "string"
            },
            "filename": {
              "type": "string"
            },
            "peerVerificationId": {
              "type": "string"
            }
          },
          "required": [
            "imageFile",
            "imageKey",
            "submittedAt",
            "verificationCode"
          ]
        },
        "LockForPublic": {
          "type": "object",
          "properties": {
            "status": {
              "description": "The status",
              "$ref": "#/components/schemas/LockStatusEnum"
            },
            "_id": {
              "type": "string",
              "description": "The lock id"
            },
            "endDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The end date"
            },
            "title": {
              "type": "string",
              "description": "The lock title"
            },
            "totalDuration": {
              "type": "number",
              "description": "The total duration, since the creation of the lock"
            },
            "user": {
              "description": "The user",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserForPublic"
                }
              ]
            },
            "keyholder": {
              "nullable": true,
              "description": "The keyholder",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserForPublic"
                }
              ]
            },
            "sharedLock": {
              "nullable": true,
              "description": "The shared lock",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SharedLockForPublic"
                }
              ]
            },
            "isAllowedToViewTime": {
              "type": "boolean",
              "description": "Whether the wearer is allowed to view the remaining time"
            },
            "canBeUnlocked": {
              "type": "boolean",
              "description": "Whether the lock can be unlocked"
            },
            "canBeUnlockedByMaxLimitDate": {
              "type": "boolean",
              "description": "Whether the lock can be unlocked because the max limit date has been reached"
            },
            "isFrozen": {
              "type": "boolean",
              "description": "Whether the lock is frozen"
            },
            "role": {
              "description": "The user role",
              "enum": [
                "keyholder",
                "wearer",
                "visitor"
              ],
              "type": "string"
            },
            "extensions": {
              "description": "The extensions",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtensionPartyForPublic"
              }
            },
            "combination": {
              "type": "string",
              "description": "The combination"
            },
            "reasonsPreventingUnlocking": {
              "description": "Reasons preventing unlocking",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReasonPreventingUnlocking"
              }
            },
            "extensionsAllowUnlocking": {
              "type": "boolean",
              "description": "Whether the extensions allow unlocking"
            },
            "lastVerificationPicture": {
              "nullable": true,
              "description": "The last verification picture",
              "allOf": [
                {
                  "$ref": "#/components/schemas/VerificationPictureItem"
                }
              ]
            },
            "createdAt": {
              "format": "date-time",
              "type": "string",
              "description": "Created at"
            },
            "updatedAt": {
              "format": "date-time",
              "type": "string",
              "description": "Updated at"
            },
            "startDate": {
              "format": "date-time",
              "type": "string",
              "description": "The start date"
            },
            "minDate": {
              "format": "date-time",
              "type": "string",
              "description": "The minimum initial date configured at creation"
            },
            "maxDate": {
              "format": "date-time",
              "type": "string",
              "description": "The maximum initial date configured at creation"
            },
            "maxLimitDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The maximum date of the lock\n\nAfter this date, the wearer can release themself\nregardless of the timer or extension restrictions."
            },
            "displayRemainingTime": {
              "type": "boolean",
              "description": "Whether the remaining time is displayed to the wearer"
            },
            "limitLockTime": {
              "type": "boolean",
              "description": "Whether the lock is limited in duration"
            },
            "deletedAt": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "Deleted at"
            },
            "unlockedAt": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "Unlocked at"
            },
            "archivedAt": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "Archived at"
            },
            "frozenAt": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "Frozen at"
            },
            "keyholderArchivedAt": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "Keyholder archived at"
            },
            "allowSessionOffer": {
              "type": "boolean",
              "description": "Whether the lock allows session offers"
            },
            "isTestLock": {
              "type": "boolean",
              "description": "Whether the lock is a test lock and counts in the user stats"
            },
            "offerToken": {
              "type": "string",
              "description": "The offer token"
            },
            "hideTimeLogs": {
              "type": "boolean",
              "description": "True if the time information should be hidden from the history"
            },
            "trusted": {
              "type": "boolean",
              "description": "Whether the keyholder is trusted"
            }
          },
          "required": [
            "status",
            "_id",
            "endDate",
            "title",
            "totalDuration",
            "user",
            "keyholder",
            "sharedLock",
            "isAllowedToViewTime",
            "canBeUnlocked",
            "canBeUnlockedByMaxLimitDate",
            "isFrozen",
            "role",
            "extensions",
            "combination",
            "reasonsPreventingUnlocking",
            "extensionsAllowUnlocking",
            "lastVerificationPicture",
            "createdAt",
            "updatedAt",
            "startDate",
            "minDate",
            "maxDate",
            "maxLimitDate",
            "displayRemainingTime",
            "limitLockTime",
            "deletedAt",
            "unlockedAt",
            "archivedAt",
            "frozenAt",
            "keyholderArchivedAt",
            "allowSessionOffer",
            "isTestLock",
            "offerToken",
            "hideTimeLogs",
            "trusted"
          ]
        },
        "CreateUpdateSharedLockDto": {
          "type": "object",
          "properties": {
            "minDuration": {
              "type": "number",
              "description": "The minimum duration, in seconds",
              "minimum": 1
            },
            "maxDuration": {
              "type": "number",
              "description": "The maximum duration, in seconds"
            },
            "maxLimitDuration": {
              "type": "number",
              "nullable": true,
              "description": "The maximum duration of the lock, in seconds\n\nAfter this duration, the wearer can release themself\nregardless of the timer or extension restrictions."
            },
            "minDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The minimum date"
            },
            "maxDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The maximum date"
            },
            "maxLimitDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The maximum date of the lock\n\nAfter this date, the wearer can release themself\nregardless of the timer or extension restrictions."
            },
            "displayRemainingTime": {
              "type": "boolean",
              "description": "Whether the remaining time should be displayed to the wearer"
            },
            "limitLockTime": {
              "type": "boolean",
              "description": "Whether the lock is limited in time"
            },
            "isPublic": {
              "type": "boolean",
              "description": "Whether the lock is public"
            },
            "maxLockedUsers": {
              "type": "number",
              "nullable": true,
              "description": "The number of maximum locked users for this shared lock",
              "minimum": 1
            },
            "password": {
              "type": "string",
              "nullable": true,
              "description": "An optional password"
            },
            "requireContact": {
              "type": "boolean",
              "description": "Whether the shared lock requires contact from wearer\n\nDisplayed for information purposes only on the lock page"
            },
            "name": {
              "type": "string",
              "description": "The name",
              "maxLength": 60
            },
            "description": {
              "type": "string",
              "description": "The description"
            },
            "photoId": {
              "type": "string",
              "description": "The Unsplash photo id"
            },
            "hideTimeLogs": {
              "type": "boolean",
              "description": "Whether the time information should be hidden from the history"
            }
          },
          "required": [
            "minDuration",
            "maxDuration",
            "maxLimitDuration",
            "minDate",
            "maxDate",
            "maxLimitDate",
            "displayRemainingTime",
            "limitLockTime",
            "isPublic",
            "maxLockedUsers",
            "password",
            "requireContact",
            "name",
            "description",
            "photoId",
            "hideTimeLogs"
          ]
        },
        "CreateSharedLockRepDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The created shared lock id"
            }
          },
          "required": [
            "id"
          ]
        },
        "UpdateTimeDto": {
          "type": "object",
          "properties": {
            "duration": {
              "type": "number",
              "description": "The duration to add, in seconds\n\nWearer can only add duration (positive values),\nunlike keyholders who can add or remove time."
            }
          },
          "required": [
            "duration"
          ]
        },
        "SetFreezeDto": {
          "type": "object",
          "properties": {
            "isFrozen": {
              "type": "boolean",
              "description": "Whether the lock is frozen"
            }
          },
          "required": [
            "isFrozen"
          ]
        },
        "SetLockSettingsDto": {
          "type": "object",
          "properties": {
            "displayRemainingTime": {
              "type": "boolean",
              "description": "Whether the remaining time is displayed to the wearer"
            },
            "hideTimeLogs": {
              "type": "boolean",
              "description": "Whether the time information should be hidden from the history"
            }
          }
        },
        "IncreaseMaxLimitDateDto": {
          "type": "object",
          "properties": {
            "maxLimitDate": {
              "format": "date-time",
              "type": "string",
              "description": "The new maximum limit date"
            },
            "disableMaxLimitDate": {
              "type": "boolean",
              "description": "Whether the maximum limit date should be disabled",
              "default": false
            }
          },
          "required": [
            "maxLimitDate",
            "disableMaxLimitDate"
          ]
        },
        "CombinationForPublic": {
          "type": "object",
          "properties": {
            "imageUrl": {
              "type": "string",
              "deprecated": true,
              "description": "Use imageFullUrl instead"
            },
            "_id": {
              "type": "string",
              "description": "The combination id"
            },
            "user": {
              "type": "string",
              "description": "The user id"
            },
            "checkStatus": {
              "description": "The review status, if the combination requires a manual review\nfrom the moderators",
              "enum": [
                "pending",
                "verified",
                "failed"
              ],
              "type": "string"
            },
            "type": {
              "description": "The combination type",
              "enum": [
                "image",
                "code"
              ],
              "type": "string"
            },
            "code": {
              "type": "string",
              "description": "The combination code, if the type is `code`"
            },
            "imageFullUrl": {
              "type": "string",
              "description": "The combination image, if the type is `image`"
            },
            "createdAt": {
              "type": "string",
              "description": "Created at"
            },
            "updatedAt": {
              "type": "string",
              "description": "Updated at"
            },
            "enableManualCheck": {
              "type": "boolean",
              "description": "Whether the combination requires a manual review from the moderators"
            }
          },
          "required": [
            "_id",
            "user",
            "checkStatus",
            "type",
            "createdAt",
            "updatedAt",
            "enableManualCheck"
          ]
        },
        "GetLockHistoryDto": {
          "type": "object",
          "properties": {
            "extension": {
              "type": "string",
              "description": "If provided, filter by extension slug"
            },
            "limit": {
              "type": "number",
              "description": "Limit",
              "minimum": 0,
              "maximum": 100
            },
            "lastId": {
              "type": "string",
              "description": "Offset lastId"
            }
          }
        },
        "ActionLogForPublic": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "payload": {
              "type": "object"
            },
            "lock": {
              "type": "string"
            },
            "role": {
              "type": "string",
              "enum": [
                "user",
                "keyholder",
                "extension",
                "admin"
              ]
            },
            "extension": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "color": {
              "type": "string",
              "nullable": true
            },
            "createdAt": {
              "format": "date-time",
              "type": "string"
            },
            "icon": {
              "type": "string",
              "nullable": true
            },
            "prefix": {
              "type": "string"
            },
            "user": {
              "$ref": "#/components/schemas/UserForPublic"
            }
          },
          "required": [
            "_id",
            "type",
            "payload",
            "lock",
            "role",
            "title",
            "description",
            "color",
            "createdAt",
            "icon",
            "prefix"
          ]
        },
        "GetHistoryRepDto": {
          "type": "object",
          "properties": {
            "results": {
              "description": "List of action logs",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ActionLogForPublic"
              }
            },
            "count": {
              "type": "number",
              "description": "Number of total action logs"
            },
            "hasMore": {
              "type": "boolean",
              "description": "Has more results"
            }
          },
          "required": [
            "results",
            "count",
            "hasMore"
          ]
        },
        "UploadFilesDto": {
          "type": "object",
          "properties": {
            "files": {
              "type": "array",
              "description": "The files to upload",
              "items": {
                "type": "file",
                "items": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "type": {
              "type": "string",
              "description": "The target storage",
              "enum": [
                "messaging"
              ]
            }
          },
          "required": [
            "files",
            "type"
          ]
        },
        "UploadFilesRepDto": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "The attachment token\n\nIt can be used in messaging, post and other endpoints that support\nattachments"
            }
          },
          "required": [
            "token"
          ]
        },
        "GetFileFromKeyRepDto": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "The file url"
            }
          },
          "required": [
            "url"
          ]
        },
        "UploadCombinationImageDto": {
          "type": "object",
          "properties": {
            "file": {
              "type": "file",
              "description": "The combination image",
              "items": {
                "type": "string",
                "format": "binary"
              }
            },
            "enableManualCheck": {
              "type": "boolean",
              "description": "Enables the manual combination image check, for Premium users."
            }
          },
          "required": [
            "file"
          ]
        },
        "CreateCodeRepDto": {
          "type": "object",
          "properties": {
            "combinationId": {
              "type": "string"
            }
          },
          "required": [
            "combinationId"
          ]
        },
        "CreateCodeDto": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "The code combination",
              "maxLength": 255
            }
          },
          "required": [
            "code"
          ]
        },
        "UserStatsForPublic": {
          "type": "object",
          "properties": {
            "nbStartedLocks": {
              "type": "number",
              "description": "Number of locks started by the user as a wearer"
            },
            "nbEndedLocks": {
              "type": "number",
              "description": "Number of locks ended by the user as a wearer"
            },
            "totalTimeLocked": {
              "type": "number",
              "description": "Total time locked"
            },
            "maxTimeLocked": {
              "type": "number",
              "description": "Maximum session duration"
            },
            "keyholderNbLocks": {
              "type": "number",
              "description": "Number of locks keyholded"
            }
          },
          "required": [
            "nbStartedLocks",
            "nbEndedLocks",
            "totalTimeLocked",
            "maxTimeLocked",
            "keyholderNbLocks"
          ]
        },
        "GetUserAchievementsResponseDto": {
          "type": "object",
          "properties": {
            "slug": {
              "type": "string"
            },
            "granted": {
              "type": "boolean"
            },
            "progress": {
              "type": "number",
              "nullable": true
            },
            "total": {
              "type": "number",
              "nullable": true
            },
            "grantedAt": {
              "type": "string",
              "nullable": true
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "category": {
              "type": "string"
            },
            "progressEnabled": {
              "type": "boolean"
            },
            "hideIfNotGranted": {
              "type": "boolean"
            }
          },
          "required": [
            "slug",
            "granted",
            "progress",
            "total",
            "grantedAt",
            "name",
            "description",
            "category",
            "progressEnabled",
            "hideIfNotGranted"
          ]
        },
        "PublicLockJoinRules": {
          "type": "object",
          "properties": {
            "canBeJoined": {
              "type": "boolean"
            },
            "containsPremiumExtension": {
              "type": "boolean"
            },
            "exceedsExtensionLimit": {
              "type": "boolean"
            },
            "oneOfExtensionsDisabled": {
              "type": "boolean"
            }
          },
          "required": [
            "canBeJoined",
            "containsPremiumExtension",
            "exceedsExtensionLimit",
            "oneOfExtensionsDisabled"
          ]
        },
        "PublicLockForPublic": {
          "type": "object",
          "properties": {
            "durationMode": {
              "description": "Duration mode",
              "$ref": "#/components/schemas/SharedLockDurationModeEnum"
            },
            "joinRules": {
              "$ref": "#/components/schemas/PublicLockJoinRules"
            },
            "maxLimitDuration": {
              "type": "number",
              "nullable": true,
              "description": "The maximum duration of the lock, in seconds\n\nAfter this duration, the wearer can release themself\nregardless of the timer or extension restrictions."
            },
            "minDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The minimum date"
            },
            "maxDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The maximum date"
            },
            "maxLimitDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The maximum date of the lock\n\nAfter this date, the wearer can release themself\nregardless of the timer or extension restrictions."
            },
            "displayRemainingTime": {
              "type": "boolean",
              "description": "Whether the remaining time should be displayed to the wearer"
            },
            "limitLockTime": {
              "type": "boolean",
              "description": "Whether the lock is limited in time"
            },
            "maxLockedUsers": {
              "type": "number",
              "nullable": true,
              "description": "The number of maximum locked users for this shared lock",
              "minimum": 1
            },
            "isPublic": {
              "type": "boolean",
              "description": "Whether the lock is public"
            },
            "requireContact": {
              "type": "boolean",
              "description": "Whether the shared lock requires contact from wearer\n\nDisplayed for information purposes only on the lock page"
            },
            "name": {
              "type": "string",
              "description": "The name"
            },
            "description": {
              "type": "string",
              "description": "The description"
            },
            "unsplashPhoto": {
              "nullable": true,
              "description": "The Unsplash photo",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UnsplashPhoto"
                }
              ]
            },
            "hideTimeLogs": {
              "type": "boolean",
              "description": "Whether the time information should be hidden from the history"
            },
            "lastSavedAt": {
              "format": "date-time",
              "type": "string",
              "description": "Last saved at"
            },
            "_id": {
              "type": "string",
              "description": "The shared lock id"
            },
            "minDuration": {
              "type": "number",
              "description": "The minimum duration, in seconds"
            },
            "maxDuration": {
              "type": "number",
              "description": "The maximum duration, in seconds"
            },
            "calculatedMaxLimitDuration": {
              "type": "number",
              "nullable": true,
              "description": "The calculated max limit duration"
            },
            "user": {
              "description": "The creator",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserForPublic"
                }
              ]
            },
            "extensions": {
              "description": "Extension configurations",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtensionConfigForPublic"
              }
            },
            "createdAt": {
              "type": "string",
              "description": "Created at"
            },
            "updatedAt": {
              "type": "string",
              "nullable": true,
              "description": "Updated at"
            },
            "deletedAt": {
              "type": "string",
              "nullable": true,
              "description": "Deleted at"
            },
            "archivedAt": {
              "type": "string",
              "nullable": true,
              "description": "Archived at"
            },
            "locks": {
              "description": "List of locks\n\nOnly returned in shared locks endpoints",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockForPublic"
              }
            },
            "requirePassword": {
              "type": "boolean",
              "description": "Whether the lock requires a password"
            }
          },
          "required": [
            "durationMode",
            "joinRules",
            "maxLimitDuration",
            "minDate",
            "maxDate",
            "maxLimitDate",
            "displayRemainingTime",
            "limitLockTime",
            "maxLockedUsers",
            "isPublic",
            "requireContact",
            "name",
            "description",
            "unsplashPhoto",
            "hideTimeLogs",
            "lastSavedAt",
            "_id",
            "minDuration",
            "maxDuration",
            "calculatedMaxLimitDuration",
            "user",
            "extensions",
            "createdAt",
            "updatedAt",
            "deletedAt",
            "archivedAt",
            "requirePassword"
          ]
        },
        "ChastikeyStatsForPublic": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "totalLocksManaged": {
              "type": "number"
            },
            "cumulativeSecondsLocked": {
              "type": "number"
            },
            "averageTimeLockedInSeconds": {
              "type": "number"
            },
            "longestCompletedLockInSeconds": {
              "type": "number"
            },
            "totalNoOfCompletedLocks": {
              "type": "number"
            },
            "username": {
              "type": "string"
            },
            "mainRole": {
              "type": "string"
            }
          },
          "required": [
            "_id",
            "totalLocksManaged",
            "cumulativeSecondsLocked",
            "averageTimeLockedInSeconds",
            "longestCompletedLockInSeconds",
            "totalNoOfCompletedLocks",
            "username",
            "mainRole"
          ]
        },
        "ProfileRepDto": {
          "type": "object",
          "properties": {
            "user": {
              "$ref": "#/components/schemas/UserForPublic"
            },
            "stats": {
              "$ref": "#/components/schemas/UserStatsForPublic"
            },
            "achievements": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GetUserAchievementsResponseDto"
              }
            },
            "sharedLocks": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PublicLockForPublic"
              }
            },
            "chastikeyStats": {
              "$ref": "#/components/schemas/ChastikeyStatsForPublic"
            }
          },
          "required": [
            "user",
            "achievements",
            "sharedLocks"
          ]
        },
        "ExtensionForPublic": {
          "type": "object",
          "properties": {
            "defaultConfig": {
              "type": "object",
              "description": "The extension configuration. "
            },
            "partnerExtensionId": {
              "type": "string",
              "nullable": true
            },
            "configIframeUrl": {
              "type": "string",
              "nullable": true
            },
            "isTesting": {
              "type": "boolean"
            },
            "isPartner": {
              "type": "boolean"
            },
            "isDevelopedByCommunity": {
              "type": "boolean"
            },
            "subtitle": {
              "type": "string",
              "description": "The extension subtitle"
            },
            "summary": {
              "type": "string",
              "description": "The extension summary"
            },
            "displayName": {
              "type": "string",
              "description": "The name displayed to the end users"
            },
            "icon": {
              "type": "string",
              "description": "The extension icon"
            },
            "slug": {
              "type": "string",
              "description": "The extension slug"
            },
            "availableModes": {
              "type": "array",
              "description": "Available modes",
              "items": {
                "type": "string",
                "enum": [
                  "cumulative",
                  "non_cumulative",
                  "turn",
                  "unlimited"
                ]
              }
            },
            "defaultRegularity": {
              "type": "number",
              "description": "Default regularity",
              "default": 3600
            },
            "isEnabled": {
              "type": "boolean",
              "description": "TWhether the extension is enabled",
              "default": true
            },
            "isPremium": {
              "type": "boolean",
              "description": "Whether the extension is only available to Premium users",
              "default": false
            },
            "isFeatured": {
              "type": "boolean",
              "description": "Whether the extension is displayed by default in the list",
              "default": false
            },
            "isCountedInExtensionsLimit": {
              "type": "boolean",
              "description": "Whether the extension is counted in the extensions limit",
              "default": true
            },
            "hasActions": {
              "type": "boolean",
              "description": "Whether the extension has actions",
              "default": true
            }
          },
          "required": [
            "defaultConfig",
            "partnerExtensionId",
            "configIframeUrl",
            "isTesting",
            "isPartner",
            "isDevelopedByCommunity",
            "subtitle",
            "summary",
            "displayName",
            "icon",
            "slug",
            "availableModes",
            "defaultRegularity",
            "isEnabled",
            "isPremium",
            "isFeatured",
            "isCountedInExtensionsLimit",
            "hasActions"
          ]
        },
        "CreateOfferRequestDto": {
          "type": "object",
          "properties": {
            "keyholder": {
              "type": "string"
            }
          },
          "required": [
            "keyholder"
          ]
        },
        "SessionOfferRequestForPublic": {
          "type": "object",
          "properties": {
            "keyholder": {
              "$ref": "#/components/schemas/UserForPublic"
            },
            "lock": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "pending",
                "accepted",
                "rejected"
              ]
            },
            "validatedAt": {
              "format": "date-time",
              "type": "string"
            },
            "archivedAt": {
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "keyholder",
            "lock",
            "status"
          ]
        },
        "ValidateOfferRequestDto": {
          "type": "object",
          "properties": {
            "accept": {
              "type": "boolean"
            }
          },
          "required": [
            "accept"
          ]
        },
        "SessionOfferRequestForKeyholder": {
          "type": "object",
          "properties": {
            "keyholder": {
              "type": "string"
            },
            "lock": {
              "$ref": "#/components/schemas/UserForPublic"
            },
            "status": {
              "type": "string",
              "enum": [
                "pending",
                "accepted",
                "rejected"
              ]
            },
            "validatedAt": {
              "format": "date-time",
              "type": "string"
            },
            "archivedAt": {
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "keyholder",
            "lock",
            "status"
          ]
        },
        "UserBadgeCount": {
          "type": "object",
          "properties": {
            "pendingMessages": {
              "type": "number",
              "description": "Number of message requests"
            },
            "unreadMessages": {
              "type": "number",
              "description": "Number of messages"
            },
            "keyholdingRequests": {
              "type": "number",
              "description": "Number of keyholding requests"
            }
          },
          "required": [
            "pendingMessages",
            "unreadMessages",
            "keyholdingRequests"
          ]
        },
        "LastMessageForPublic": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "message": {
              "type": "string",
              "description": "The message content"
            }
          },
          "required": [
            "_id",
            "message"
          ]
        },
        "ConversationForPublic": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "The conversation id"
            },
            "users": {
              "description": "List of users who are part of the conversation",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserForPublic"
              }
            },
            "lastMessage": {
              "description": "The last message sent",
              "allOf": [
                {
                  "$ref": "#/components/schemas/LastMessageForPublic"
                }
              ]
            },
            "unread": {
              "type": "boolean",
              "description": "Is the conversation unread"
            },
            "status": {
              "description": "Conversation status",
              "enum": [
                "pending",
                "approved",
                "ignored"
              ],
              "type": "string"
            },
            "createdAt": {
              "format": "date-time",
              "type": "string",
              "description": "Created at"
            },
            "lastMessageAt": {
              "format": "date-time",
              "type": "string",
              "description": "Last message at"
            },
            "isMember": {
              "type": "boolean",
              "description": "Whether the user is part of the conversation"
            },
            "isSenderBanned": {
              "type": "boolean",
              "description": "Whether the sender is banned"
            },
            "type": {
              "description": "The conversation type",
              "enum": [
                "private",
                "group"
              ],
              "type": "string"
            }
          },
          "required": [
            "_id",
            "users",
            "unread",
            "status",
            "createdAt",
            "lastMessageAt",
            "isMember",
            "isSenderBanned",
            "type"
          ]
        },
        "GetConversationsRepDto": {
          "type": "object",
          "properties": {
            "results": {
              "description": "List of conversations",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConversationForPublic"
              }
            },
            "count": {
              "type": "number",
              "description": "The number of results"
            },
            "hasMore": {
              "type": "boolean",
              "description": "Has more"
            }
          },
          "required": [
            "results",
            "count",
            "hasMore"
          ]
        },
        "CreateConversationDto": {
          "type": "object",
          "properties": {
            "users": {
              "description": "List of user ids in the conversation, excluding the logged user",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string",
              "description": "The conversation type\n\nThe `group` type is currently not supported.",
              "enum": [
                "private",
                "group"
              ]
            },
            "attachments": {
              "type": "string",
              "description": "The file token\n\nCreate a file token by using the `/files/upload` endpoint."
            },
            "message": {
              "type": "string",
              "description": "The message"
            },
            "nonce": {
              "type": "string",
              "description": "Nonce\n\nIf this field is included, it will be returned to the websocket client"
            }
          },
          "required": [
            "users",
            "type",
            "message"
          ]
        },
        "UpdateConversationDto": {
          "type": "object",
          "properties": {
            "attachments": {
              "type": "string",
              "description": "The file token\n\nCreate a file token by using the `/files/upload` endpoint."
            },
            "message": {
              "type": "string",
              "description": "The message"
            },
            "nonce": {
              "type": "string",
              "description": "Nonce\n\nIf this field is included, it will be returned to the websocket client"
            }
          },
          "required": [
            "message"
          ]
        },
        "AppFileForPublic": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "The file URL"
            }
          },
          "required": [
            "url"
          ]
        },
        "MessageForPublic": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "The message id"
            },
            "user": {
              "type": "string",
              "description": "The sender id"
            },
            "attachments": {
              "description": "Message attachments",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AppFileForPublic"
              }
            },
            "conversation": {
              "type": "string",
              "description": "The conversation id"
            },
            "createdAt": {
              "format": "date-time",
              "type": "string",
              "description": "Created at"
            },
            "updatedAt": {
              "format": "date-time",
              "type": "string",
              "description": "Updated at"
            },
            "nonce": {
              "type": "string",
              "description": "Nonce\n\nIs present only in the return of the websocket during the creation of the\nmessage, for the sender."
            },
            "type": {
              "type": "string",
              "description": "The message type",
              "enum": [
                "message",
                "log"
              ]
            },
            "message": {
              "type": "string",
              "description": "The message content"
            }
          },
          "required": [
            "_id",
            "user",
            "attachments",
            "conversation",
            "createdAt",
            "updatedAt",
            "type",
            "message"
          ]
        },
        "SetConversationStatusDto": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "The new conversation status",
              "enum": [
                "approved",
                "ignored"
              ]
            }
          },
          "required": [
            "status"
          ]
        },
        "SetConversationUnreadDto": {
          "type": "object",
          "properties": {
            "unread": {
              "type": "boolean",
              "description": "True if unread"
            }
          },
          "required": [
            "unread"
          ]
        },
        "GetMessagesRepDto": {
          "type": "object",
          "properties": {
            "results": {
              "description": "List of messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MessageForPublic"
              }
            },
            "count": {
              "type": "number",
              "description": "The number of results"
            },
            "hasMore": {
              "type": "boolean",
              "description": "Has more"
            }
          },
          "required": [
            "results",
            "count",
            "hasMore"
          ]
        },
        "GetLockInfoFromExtensionRepDto": {
          "type": "object",
          "properties": {
            "extension": {
              "type": "object",
              "description": "The extension configuration. "
            },
            "lock": {
              "description": "The lock",
              "allOf": [
                {
                  "$ref": "#/components/schemas/LockForPublic"
                }
              ]
            }
          },
          "required": [
            "extension",
            "lock"
          ]
        },
        "TriggerExtensionActionDto": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "description": "The action name\nRefer to the extension documentation to know the available actions"
            },
            "payload": {
              "type": "object",
              "description": "The action payload"
            }
          },
          "required": [
            "action",
            "payload"
          ]
        },
        "TemporaryOpeningSetCombinationDto": {
          "type": "object",
          "properties": {
            "combinationId": {
              "type": "string"
            }
          },
          "required": [
            "combinationId"
          ]
        },
        "CommunityEventAction": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string",
              "nullable": true
            },
            "points": {
              "type": "number"
            }
          },
          "required": [
            "name",
            "title",
            "description",
            "points"
          ]
        },
        "CommunityEventCategory": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "maxPoints": {
              "type": "number",
              "nullable": true
            },
            "actions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CommunityEventAction"
              }
            }
          },
          "required": [
            "name",
            "title",
            "maxPoints",
            "actions"
          ]
        },
        "GetPeriodDetailsDto": {
          "type": "object",
          "properties": {
            "date": {
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "date"
          ]
        },
        "GetPeriodDetailsRepDto": {
          "type": "object",
          "properties": {
            "categories": {
              "type": "object",
              "additionalProperties": {
                "type": "number"
              }
            },
            "actions": {
              "type": "object",
              "additionalProperties": {
                "type": "number"
              }
            },
            "start": {
              "format": "date-time",
              "type": "string"
            },
            "end": {
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "categories",
            "actions",
            "start",
            "end"
          ]
        },
        "LockExtensionConfigDto": {
          "type": "object",
          "properties": {
            "slug": {
              "type": "string",
              "description": "The extension slug. "
            },
            "config": {
              "type": "object",
              "description": "The extension configuration. "
            },
            "partnerConfigurationToken": {
              "type": "string"
            },
            "mode": {
              "type": "string",
              "enum": [
                "cumulative",
                "non_cumulative",
                "turn",
                "unlimited"
              ]
            },
            "regularity": {
              "type": "number",
              "minimum": 0
            }
          },
          "required": [
            "slug",
            "config",
            "mode",
            "regularity"
          ]
        },
        "CreateLockDto": {
          "type": "object",
          "properties": {
            "minDuration": {
              "type": "number",
              "description": "Min duration in seconds",
              "minimum": 0
            },
            "maxDuration": {
              "type": "number",
              "description": "Max duration in seconds"
            },
            "maxLimitDuration": {
              "type": "number",
              "nullable": true,
              "description": "Max limit duration in seconds"
            },
            "displayRemainingTime": {
              "type": "boolean",
              "description": "True if the user can view the remaining time"
            },
            "limitLockTime": {
              "type": "boolean",
              "description": "True if the lock is limited in duration"
            },
            "combinationId": {
              "type": "string",
              "description": "The combination id\n\nA combination object can be created by using the combination endpoints."
            },
            "extensions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockExtensionConfigDto"
              }
            },
            "allowSessionOffer": {
              "type": "boolean",
              "description": "True if the wearer can offer the lock to a keyholder"
            },
            "isTestLock": {
              "type": "boolean",
              "description": "Whether the lock is a test lock and counts in the user stats",
              "default": false
            },
            "hideTimeLogs": {
              "type": "boolean",
              "description": "True if the time information should be hidden from the history"
            }
          },
          "required": [
            "minDuration",
            "maxDuration",
            "maxLimitDuration",
            "displayRemainingTime",
            "limitLockTime",
            "combinationId",
            "extensions",
            "allowSessionOffer",
            "isTestLock",
            "hideTimeLogs"
          ]
        },
        "LockCreatedRepDto": {
          "type": "object",
          "properties": {
            "lockId": {
              "type": "string",
              "description": "The created lock id"
            }
          },
          "required": [
            "lockId"
          ]
        },
        "EditLockExtensionsDto": {
          "type": "object",
          "properties": {
            "extensions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockExtensionConfigDto"
              }
            }
          },
          "required": [
            "extensions"
          ]
        },
        "CreateLockFromSharedLockDto": {
          "type": "object",
          "properties": {
            "password": {
              "type": "string",
              "description": "The shared lock password, if needed"
            },
            "combinationId": {
              "type": "string",
              "description": "The combination id"
            },
            "isTestLock": {
              "type": "boolean",
              "description": "Whether the lock is a test lock and counts in the user stats\nOnly available if the shared lock allows test locks",
              "default": false
            }
          },
          "required": [
            "combinationId",
            "isTestLock"
          ]
        },
        "CommunityEventSettings": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Whether the community event is enabled"
            },
            "slug": {
              "type": "string",
              "description": "The community event slug"
            },
            "name": {
              "type": "string",
              "description": "The community event name"
            },
            "color": {
              "type": "string",
              "description": "The community event color"
            },
            "lightColor": {
              "type": "string",
              "description": "The community event light color"
            },
            "icon": {
              "type": "string",
              "description": "The community event icon"
            }
          },
          "required": [
            "enabled",
            "slug",
            "name",
            "color",
            "lightColor",
            "icon"
          ]
        },
        "AppSettingsDto": {
          "type": "object",
          "properties": {
            "features": {
              "description": "Global features",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FeatureSwitchEnum"
              }
            },
            "nonPremiumMaxLocks": {
              "type": "number",
              "description": "The maximum number of locks allowed for a non-premium user"
            },
            "nonPremiumMaxExtensions": {
              "type": "number",
              "description": "The maximum number of extensions allowed for a non-premium user"
            },
            "maxAttachments": {
              "type": "number",
              "description": "Maximum number of attachments per upload"
            },
            "registerRequiresAccessKey": {
              "type": "boolean",
              "description": "True if the instance requires an access key"
            },
            "recaptchaClientKey": {
              "type": "string",
              "description": "The recaptcha client key"
            },
            "time": {
              "format": "date-time",
              "type": "string",
              "description": "The server time"
            },
            "version": {
              "type": "string",
              "description": "The app version"
            },
            "communityEvent": {
              "nullable": true,
              "description": "Community event settings",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CommunityEventSettings"
                }
              ]
            }
          },
          "required": [
            "features",
            "nonPremiumMaxLocks",
            "nonPremiumMaxExtensions",
            "maxAttachments",
            "registerRequiresAccessKey",
            "recaptchaClientKey",
            "time",
            "version",
            "communityEvent"
          ]
        },
        "UserSettings": {
          "type": "object",
          "properties": {
            "showLocksOnProfile": {
              "type": "boolean"
            },
            "showOnlineStatus": {
              "type": "boolean"
            },
            "showDiscordOnProfile": {
              "type": "boolean"
            },
            "emailOnWearerUsesSharedLock": {
              "type": "boolean"
            },
            "messageOnWearerUsesSharedLock": {
              "type": "boolean"
            },
            "discordNotifications": {
              "type": "boolean"
            },
            "discordMessagingNotifications": {
              "type": "boolean"
            },
            "displayNsfw": {
              "type": "boolean"
            }
          },
          "required": [
            "showLocksOnProfile",
            "showOnlineStatus",
            "showDiscordOnProfile",
            "emailOnWearerUsesSharedLock",
            "messageOnWearerUsesSharedLock",
            "discordNotifications",
            "discordMessagingNotifications",
            "displayNsfw"
          ]
        },
        "Region": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "shortCode": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        },
        "Country": {
          "type": "object",
          "properties": {
            "countryName": {
              "type": "string"
            },
            "countryShortCode": {
              "type": "string"
            },
            "regions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Region"
              }
            }
          },
          "required": [
            "countryName",
            "countryShortCode"
          ]
        },
        "UserPrivateMetadata": {
          "type": "object",
          "properties": {
            "locktoberPlusModalPending": {
              "type": "boolean"
            }
          },
          "required": [
            "locktoberPlusModalPending"
          ]
        },
        "CurrentUserForProfileSettings": {
          "type": "object",
          "properties": {
            "features": {
              "description": "Enabled features",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FeatureSwitchEnum"
              }
            },
            "canEditUsername": {
              "type": "boolean"
            },
            "email": {
              "type": "string"
            },
            "keycloakId": {
              "type": "string",
              "description": "The user Keycloak id"
            },
            "username": {
              "type": "string",
              "description": "The username"
            },
            "subscriptionEnd": {
              "format": "date-time",
              "type": "string",
              "description": "End date of subscription"
            },
            "customSubscriptionEnd": {
              "format": "date-time",
              "type": "string",
              "description": "End date of custom subscription"
            },
            "description": {
              "type": "string",
              "description": "The profile description"
            },
            "location": {
              "type": "string",
              "description": "The location"
            },
            "gender": {
              "type": "string",
              "description": "The gender"
            },
            "birthDate": {
              "format": "date-time",
              "type": "string",
              "description": "The birth date"
            },
            "role": {
              "type": "string",
              "description": "The role",
              "enum": [
                "keyholder",
                "wearer",
                "switch",
                "unspecified"
              ]
            },
            "emailVerified": {
              "type": "boolean",
              "description": "Whether the email is verified"
            },
            "isDeveloper": {
              "type": "boolean",
              "description": "Whether the user is a developer"
            },
            "isModerator": {
              "type": "boolean",
              "description": "Whether the user is a moderator"
            },
            "subscriptionCancelAfterEnd": {
              "type": "boolean",
              "description": "Whether the subscription is canceled after the end date"
            },
            "discordId": {
              "type": "string",
              "description": "The Discord id"
            },
            "discordUsername": {
              "type": "string",
              "description": "The Discord username"
            },
            "isAdmin": {
              "type": "boolean",
              "description": "Whether the user is an admin"
            },
            "isFindom": {
              "type": "boolean",
              "description": "Whether the user is a findom"
            },
            "settings": {
              "description": "The user settings",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserSettings"
                }
              ]
            },
            "metadata": {
              "description": "The user metadata",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserMetadata"
                }
              ]
            },
            "country": {
              "description": "The country",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Country"
                }
              ]
            },
            "region": {
              "description": "Region",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Region"
                }
              ]
            },
            "privateMetadata": {
              "description": "The user private metadata",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserPrivateMetadata"
                }
              ]
            },
            "hasAcceptedCommunityRules": {
              "type": "boolean",
              "description": "Whether the user has accepted the community rules"
            },
            "_id": {
              "type": "string",
              "description": "The user id"
            },
            "avatarUrl": {
              "type": "string",
              "description": "The avatar URL"
            },
            "isPremium": {
              "type": "boolean",
              "description": "True if the user is a premium user"
            }
          },
          "required": [
            "features",
            "canEditUsername",
            "keycloakId",
            "username",
            "description",
            "location",
            "gender",
            "birthDate",
            "role",
            "emailVerified",
            "subscriptionCancelAfterEnd",
            "isFindom",
            "settings",
            "metadata",
            "country",
            "region",
            "privateMetadata",
            "hasAcceptedCommunityRules",
            "_id",
            "avatarUrl",
            "isPremium"
          ]
        },
        "CurrentUser": {
          "type": "object",
          "properties": {
            "features": {
              "description": "Enabled features",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FeatureSwitchEnum"
              }
            },
            "_id": {
              "type": "string",
              "description": "The user id"
            },
            "avatarUrl": {
              "type": "string",
              "description": "The avatar URL"
            },
            "isPremium": {
              "type": "boolean",
              "description": "True if the user is a premium user"
            },
            "keycloakId": {
              "type": "string",
              "description": "The user Keycloak id"
            },
            "username": {
              "type": "string",
              "description": "The username"
            },
            "email": {
              "type": "string",
              "description": "The email"
            },
            "subscriptionEnd": {
              "format": "date-time",
              "type": "string",
              "description": "End date of subscription"
            },
            "customSubscriptionEnd": {
              "format": "date-time",
              "type": "string",
              "description": "End date of custom subscription"
            },
            "description": {
              "type": "string",
              "description": "The profile description"
            },
            "location": {
              "type": "string",
              "description": "The location"
            },
            "gender": {
              "type": "string",
              "description": "The gender"
            },
            "birthDate": {
              "format": "date-time",
              "type": "string",
              "description": "The birth date"
            },
            "role": {
              "type": "string",
              "description": "The role",
              "enum": [
                "keyholder",
                "wearer",
                "switch",
                "unspecified"
              ]
            },
            "emailVerified": {
              "type": "boolean",
              "description": "Whether the email is verified"
            },
            "isDeveloper": {
              "type": "boolean",
              "description": "Whether the user is a developer"
            },
            "isModerator": {
              "type": "boolean",
              "description": "Whether the user is a moderator"
            },
            "subscriptionCancelAfterEnd": {
              "type": "boolean",
              "description": "Whether the subscription is canceled after the end date"
            },
            "discordId": {
              "type": "string",
              "description": "The Discord id"
            },
            "discordUsername": {
              "type": "string",
              "description": "The Discord username"
            },
            "isAdmin": {
              "type": "boolean",
              "description": "Whether the user is an admin"
            },
            "isFindom": {
              "type": "boolean",
              "description": "Whether the user is a findom"
            },
            "settings": {
              "description": "The user settings",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserSettings"
                }
              ]
            },
            "metadata": {
              "description": "The user metadata",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserMetadata"
                }
              ]
            },
            "country": {
              "description": "The country",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Country"
                }
              ]
            },
            "region": {
              "description": "Region",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Region"
                }
              ]
            },
            "privateMetadata": {
              "description": "The user private metadata",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserPrivateMetadata"
                }
              ]
            },
            "hasAcceptedCommunityRules": {
              "type": "boolean",
              "description": "Whether the user has accepted the community rules"
            }
          },
          "required": [
            "features",
            "_id",
            "avatarUrl",
            "isPremium",
            "keycloakId",
            "username",
            "email",
            "description",
            "location",
            "gender",
            "birthDate",
            "role",
            "emailVerified",
            "subscriptionCancelAfterEnd",
            "isFindom",
            "settings",
            "metadata",
            "country",
            "region",
            "privateMetadata",
            "hasAcceptedCommunityRules"
          ]
        },
        "SearchUserUsernameDto": {
          "type": "object",
          "properties": {
            "search": {
              "type": "string"
            }
          },
          "required": [
            "search"
          ]
        },
        "LockForKeyholder": {
          "type": "object",
          "properties": {
            "status": {
              "description": "The status",
              "$ref": "#/components/schemas/LockStatusEnum"
            },
            "startDate": {
              "format": "date-time",
              "type": "string",
              "description": "The start date"
            },
            "minDate": {
              "format": "date-time",
              "type": "string",
              "description": "The minimum initial date configured at creation"
            },
            "maxDate": {
              "format": "date-time",
              "type": "string",
              "description": "The maximum initial date configured at creation"
            },
            "maxLimitDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The maximum date of the lock\n\nAfter this date, the wearer can release themself\nregardless of the timer or extension restrictions."
            },
            "displayRemainingTime": {
              "type": "boolean",
              "description": "Whether the remaining time is displayed to the wearer"
            },
            "limitLockTime": {
              "type": "boolean",
              "description": "Whether the lock is limited in duration"
            },
            "deletedAt": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "Deleted at"
            },
            "unlockedAt": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "Unlocked at"
            },
            "archivedAt": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "Archived at"
            },
            "frozenAt": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "Frozen at"
            },
            "keyholderArchivedAt": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "Keyholder archived at"
            },
            "allowSessionOffer": {
              "type": "boolean",
              "description": "Whether the lock allows session offers"
            },
            "isTestLock": {
              "type": "boolean",
              "description": "Whether the lock is a test lock and counts in the user stats"
            },
            "offerToken": {
              "type": "string",
              "description": "The offer token"
            },
            "hideTimeLogs": {
              "type": "boolean",
              "description": "True if the time information should be hidden from the history"
            },
            "trusted": {
              "type": "boolean",
              "description": "Whether the keyholder is trusted"
            },
            "_id": {
              "type": "string",
              "description": "The lock id"
            },
            "endDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The end date"
            },
            "title": {
              "type": "string",
              "description": "The lock title"
            },
            "totalDuration": {
              "type": "number",
              "description": "The total duration, since the creation of the lock"
            },
            "user": {
              "description": "The user",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserForPublic"
                }
              ]
            },
            "keyholder": {
              "nullable": true,
              "description": "The keyholder",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserForPublic"
                }
              ]
            },
            "sharedLock": {
              "nullable": true,
              "description": "The shared lock",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SharedLockForPublic"
                }
              ]
            },
            "isAllowedToViewTime": {
              "type": "boolean",
              "description": "Whether the wearer is allowed to view the remaining time"
            },
            "canBeUnlocked": {
              "type": "boolean",
              "description": "Whether the lock can be unlocked"
            },
            "canBeUnlockedByMaxLimitDate": {
              "type": "boolean",
              "description": "Whether the lock can be unlocked because the max limit date has been reached"
            },
            "isFrozen": {
              "type": "boolean",
              "description": "Whether the lock is frozen"
            },
            "role": {
              "type": "string",
              "description": "The user role",
              "enum": [
                "keyholder",
                "wearer",
                "visitor"
              ]
            },
            "extensions": {
              "description": "The extensions",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtensionPartyForPublic"
              }
            },
            "combination": {
              "type": "string",
              "description": "The combination"
            },
            "reasonsPreventingUnlocking": {
              "description": "Reasons preventing unlocking",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReasonPreventingUnlocking"
              }
            },
            "extensionsAllowUnlocking": {
              "type": "boolean",
              "description": "Whether the extensions allow unlocking"
            },
            "lastVerificationPicture": {
              "nullable": true,
              "description": "The last verification picture",
              "allOf": [
                {
                  "$ref": "#/components/schemas/VerificationPictureItem"
                }
              ]
            },
            "createdAt": {
              "format": "date-time",
              "type": "string",
              "description": "Created at"
            },
            "updatedAt": {
              "format": "date-time",
              "type": "string",
              "description": "Updated at"
            }
          },
          "required": [
            "status",
            "startDate",
            "minDate",
            "maxDate",
            "maxLimitDate",
            "displayRemainingTime",
            "limitLockTime",
            "deletedAt",
            "unlockedAt",
            "archivedAt",
            "frozenAt",
            "keyholderArchivedAt",
            "allowSessionOffer",
            "isTestLock",
            "offerToken",
            "hideTimeLogs",
            "trusted",
            "_id",
            "endDate",
            "title",
            "totalDuration",
            "user",
            "keyholder",
            "sharedLock",
            "isAllowedToViewTime",
            "canBeUnlocked",
            "canBeUnlockedByMaxLimitDate",
            "isFrozen",
            "role",
            "extensions",
            "combination",
            "reasonsPreventingUnlocking",
            "extensionsAllowUnlocking",
            "lastVerificationPicture",
            "createdAt",
            "updatedAt"
          ]
        },
        "SharedLocksCriteriaData": {
          "type": "object",
          "properties": {
            "sharedLockIds": {
              "description": "An array of shared locks ids",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "includeKeyholderLocks": {
              "type": "boolean",
              "description": "Whether the request includes locks created by wearers"
            }
          }
        },
        "KeyholderSearchLocksCriteria": {
          "type": "object",
          "properties": {
            "sharedLocks": {
              "$ref": "#/components/schemas/SharedLocksCriteriaData"
            }
          }
        },
        "KeyholderSearchLocksDto": {
          "type": "object",
          "properties": {
            "criteria": {
              "description": "Search criteria",
              "default": {},
              "allOf": [
                {
                  "$ref": "#/components/schemas/KeyholderSearchLocksCriteria"
                }
              ]
            },
            "status": {
              "type": "string",
              "description": "Filter by lock status",
              "enum": [
                "locked",
                "unlocked",
                "deserted",
                "archived"
              ]
            },
            "search": {
              "type": "string",
              "description": "Search by username of shared lock name\nMin. 2 characters"
            },
            "page": {
              "type": "number",
              "description": "Page number (starts with 0)",
              "minimum": 0
            },
            "limit": {
              "type": "number",
              "description": "Number of items returned",
              "minimum": 1,
              "maximum": 50
            }
          }
        },
        "KeyholderSearchLocksRepDto": {
          "type": "object",
          "properties": {
            "pages": {
              "type": "number",
              "description": "Number of pages"
            },
            "total": {
              "type": "number",
              "description": "Number of results"
            },
            "locks": {
              "description": "List of locks",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockForKeyholder"
              }
            }
          },
          "required": [
            "pages",
            "total",
            "locks"
          ]
        },
        "CreateMessageReportItemDto": {
          "type": "object",
          "properties": {
            "type": {
              "description": "The report type\nEquals to `message`",
              "enum": [
                "message"
              ],
              "type": "string"
            },
            "messageId": {
              "type": "string",
              "description": "The message id"
            }
          },
          "required": [
            "type",
            "messageId"
          ]
        },
        "CreatePostReportItemDto": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The report type\nEquals to `post`",
              "enum": [
                "post"
              ]
            },
            "postId": {
              "type": "string",
              "description": "The post id"
            }
          },
          "required": [
            "type",
            "postId"
          ]
        },
        "CreateReportDto": {
          "type": "object",
          "properties": {
            "target": {
              "description": "The content to report",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateMessageReportItemDto"
                },
                {
                  "$ref": "#/components/schemas/CreatePostReportItemDto"
                }
              ]
            },
            "reason": {
              "type": "string",
              "description": "The reason of the report",
              "enum": [
                "harassment",
                "suicide_self_injury",
                "inappropriate_content",
                "hate_speech",
                "unsolicited_content",
                "other"
              ]
            },
            "message": {
              "type": "string",
              "description": "An optional message"
            }
          },
          "required": [
            "target",
            "reason"
          ]
        },
        "DurationCriteriaData": {
          "type": "object",
          "properties": {
            "minDuration": {
              "type": "number"
            },
            "maxDuration": {
              "type": "number"
            }
          },
          "required": [
            "minDuration",
            "maxDuration"
          ]
        },
        "ExtensionCriteriaData": {
          "type": "object",
          "properties": {
            "extensions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "all": {
              "type": "boolean",
              "default": false
            }
          },
          "required": [
            "extensions",
            "all"
          ]
        },
        "SearchPublicLockCriteria": {
          "type": "object",
          "properties": {
            "duration": {
              "$ref": "#/components/schemas/DurationCriteriaData"
            },
            "extensions": {
              "$ref": "#/components/schemas/ExtensionCriteriaData"
            }
          },
          "required": [
            "duration",
            "extensions"
          ]
        },
        "SearchPublicLockDto": {
          "type": "object",
          "properties": {
            "criteria": {
              "default": {},
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchPublicLockCriteria"
                }
              ]
            },
            "limit": {
              "type": "number",
              "default": 15,
              "minimum": 0,
              "maximum": 100
            },
            "lastId": {
              "type": "string"
            }
          },
          "required": [
            "criteria",
            "limit"
          ]
        },
        "PublicLockForSearch": {
          "type": "object",
          "properties": {
            "durationMode": {
              "description": "Duration mode",
              "$ref": "#/components/schemas/SharedLockDurationModeEnum"
            },
            "maxLimitDuration": {
              "type": "number",
              "nullable": true,
              "description": "The maximum duration of the lock, in seconds\n\nAfter this duration, the wearer can release themself\nregardless of the timer or extension restrictions."
            },
            "minDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The minimum date"
            },
            "maxDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The maximum date"
            },
            "maxLimitDate": {
              "format": "date-time",
              "type": "string",
              "nullable": true,
              "description": "The maximum date of the lock\n\nAfter this date, the wearer can release themself\nregardless of the timer or extension restrictions."
            },
            "displayRemainingTime": {
              "type": "boolean",
              "description": "Whether the remaining time should be displayed to the wearer"
            },
            "limitLockTime": {
              "type": "boolean",
              "description": "Whether the lock is limited in time"
            },
            "maxLockedUsers": {
              "type": "number",
              "nullable": true,
              "description": "The number of maximum locked users for this shared lock",
              "minimum": 1
            },
            "isPublic": {
              "type": "boolean",
              "description": "Whether the lock is public"
            },
            "requireContact": {
              "type": "boolean",
              "description": "Whether the shared lock requires contact from wearer\n\nDisplayed for information purposes only on the lock page"
            },
            "name": {
              "type": "string",
              "description": "The name"
            },
            "description": {
              "type": "string",
              "description": "The description"
            },
            "unsplashPhoto": {
              "nullable": true,
              "description": "The Unsplash photo",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UnsplashPhoto"
                }
              ]
            },
            "hideTimeLogs": {
              "type": "boolean",
              "description": "Whether the time information should be hidden from the history"
            },
            "lastSavedAt": {
              "format": "date-time",
              "type": "string",
              "description": "Last saved at"
            },
            "_id": {
              "type": "string",
              "description": "The shared lock id"
            },
            "minDuration": {
              "type": "number",
              "description": "The minimum duration, in seconds"
            },
            "maxDuration": {
              "type": "number",
              "description": "The maximum duration, in seconds"
            },
            "calculatedMaxLimitDuration": {
              "type": "number",
              "nullable": true,
              "description": "The calculated max limit duration"
            },
            "user": {
              "description": "The creator",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserForPublic"
                }
              ]
            },
            "createdAt": {
              "type": "string",
              "description": "Created at"
            },
            "updatedAt": {
              "type": "string",
              "nullable": true,
              "description": "Updated at"
            },
            "deletedAt": {
              "type": "string",
              "nullable": true,
              "description": "Deleted at"
            },
            "archivedAt": {
              "type": "string",
              "nullable": true,
              "description": "Archived at"
            },
            "locks": {
              "description": "List of locks\n\nOnly returned in shared locks endpoints",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockForPublic"
              }
            },
            "requirePassword": {
              "type": "boolean",
              "description": "Whether the lock requires a password"
            },
            "joinRules": {
              "$ref": "#/components/schemas/PublicLockJoinRules"
            }
          },
          "required": [
            "durationMode",
            "maxLimitDuration",
            "minDate",
            "maxDate",
            "maxLimitDate",
            "displayRemainingTime",
            "limitLockTime",
            "maxLockedUsers",
            "isPublic",
            "requireContact",
            "name",
            "description",
            "unsplashPhoto",
            "hideTimeLogs",
            "lastSavedAt",
            "_id",
            "minDuration",
            "maxDuration",
            "calculatedMaxLimitDuration",
            "user",
            "createdAt",
            "updatedAt",
            "deletedAt",
            "archivedAt",
            "requirePassword",
            "joinRules"
          ]
        },
        "SearchPublicLockRepDto": {
          "type": "object",
          "properties": {
            "count": {
              "type": "number"
            },
            "hasMore": {
              "type": "boolean"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PublicLockForSearch"
              }
            }
          },
          "required": [
            "count",
            "hasMore",
            "results"
          ]
        },
        "ExploreCategoryForPublic": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "locks": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PublicLockForSearch"
              }
            },
            "description": {
              "type": "string"
            },
            "featured": {
              "type": "boolean"
            },
            "nbItems": {
              "type": "number",
              "nullable": true
            },
            "order": {
              "type": "number"
            },
            "title": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "required": [
            "_id",
            "locks",
            "description",
            "featured",
            "nbItems",
            "order",
            "title",
            "type"
          ]
        },
        "IsFavoriteSharedLockRepDto": {
          "type": "object",
          "properties": {
            "favorite": {
              "type": "boolean",
              "description": "Whether the lock is user favorite"
            }
          },
          "required": [
            "favorite"
          ]
        },
        "GetFavoriteSharedLocksDto": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "number",
              "default": 15,
              "minimum": 0,
              "maximum": 100
            },
            "lastId": {
              "type": "string"
            }
          },
          "required": [
            "limit"
          ]
        },
        "GetFavoriteSharedLocksRepDto": {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PublicLockForPublic"
              }
            },
            "lastId": {
              "type": "string"
            },
            "hasMore": {
              "type": "boolean"
            },
            "count": {
              "type": "number"
            }
          },
          "required": [
            "results",
            "lastId",
            "hasMore",
            "count"
          ]
        },
        "PeerVerificationStatusEnum": {
          "type": "string",
          "enum": [
            "ongoing",
            "verified",
            "rejected"
          ]
        },
        "PeerVerificationVoteStatus": {
          "type": "object",
          "properties": {
            "status": {
              "description": "Peer verification status",
              "$ref": "#/components/schemas/PeerVerificationStatusEnum"
            },
            "_id": {
              "type": "string",
              "description": "Peer verification id"
            },
            "verifiedVotes": {
              "type": "number",
              "description": "Number of verified votes"
            },
            "rejectedVotes": {
              "type": "number",
              "description": "Number of rejected votes"
            }
          },
          "required": [
            "status",
            "_id",
            "verifiedVotes",
            "rejectedVotes"
          ]
        },
        "VerificationPictureHistoryEntry": {
          "type": "object",
          "properties": {
            "verificationCode": {
              "type": "string",
              "description": "The verification code"
            },
            "peerVerificationId": {
              "type": "string",
              "description": "The peer verification id"
            },
            "imageKey": {
              "type": "string",
              "description": "The peer verification image key"
            },
            "submittedAt": {
              "format": "date-time",
              "type": "string",
              "description": "Submitted at"
            },
            "votes": {
              "description": "Votes if the peer verification is enabled",
              "allOf": [
                {
                  "$ref": "#/components/schemas/PeerVerificationVoteStatus"
                }
              ]
            }
          },
          "required": [
            "imageKey",
            "submittedAt"
          ]
        },
        "KeycloakGlobalConfig": {
          "type": "object",
          "properties": {
            "clientId": {
              "type": "string"
            },
            "realm": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "required": [
            "clientId",
            "realm",
            "url"
          ]
        },
        "GlobalConfig": {
          "type": "object",
          "properties": {
            "apiUrl": {
              "type": "string"
            },
            "keycloak": {
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/KeycloakGlobalConfig"
                }
              ]
            }
          },
          "required": [
            "apiUrl",
            "keycloak"
          ]
        },
        "PartnerConfigurationChildEventEnum": {
          "type": "string",
          "enum": [
            "capabilities",
            "save_loading",
            "save_success",
            "save_failed"
          ]
        },
        "PartnerConfigurationChildCapabilitiesFeatures": {
          "type": "object",
          "properties": {
            "save": {
              "type": "boolean"
            }
          },
          "required": [
            "save"
          ]
        },
        "PartnerConfigurationChildCapabilitiesEvent": {
          "type": "object",
          "properties": {
            "features": {
              "$ref": "#/components/schemas/PartnerConfigurationChildCapabilitiesFeatures"
            }
          },
          "required": [
            "features"
          ]
        },
        "PartnerConfigurationChildEvents": {
          "type": "object",
          "properties": {
            "event": {
              "$ref": "#/components/schemas/PartnerConfigurationChildEventEnum"
            },
            "payload": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PartnerConfigurationChildCapabilitiesEvent"
                }
              ],
              "allOf": [
                {
                  "$ref": "#/components/schemas/PartnerConfigurationChildCapabilitiesEvent"
                }
              ]
            }
          },
          "required": [
            "event",
            "payload"
          ]
        }
      }
    }
  }