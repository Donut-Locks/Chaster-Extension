/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ChastikeyStatsForPublic
 */
export interface ChastikeyStatsForPublic {
    /**
     * 
     * @type {string}
     * @memberof ChastikeyStatsForPublic
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof ChastikeyStatsForPublic
     */
    totalLocksManaged: number;
    /**
     * 
     * @type {number}
     * @memberof ChastikeyStatsForPublic
     */
    cumulativeSecondsLocked: number;
    /**
     * 
     * @type {number}
     * @memberof ChastikeyStatsForPublic
     */
    averageTimeLockedInSeconds: number;
    /**
     * 
     * @type {number}
     * @memberof ChastikeyStatsForPublic
     */
    longestCompletedLockInSeconds: number;
    /**
     * 
     * @type {number}
     * @memberof ChastikeyStatsForPublic
     */
    totalNoOfCompletedLocks: number;
    /**
     * 
     * @type {string}
     * @memberof ChastikeyStatsForPublic
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof ChastikeyStatsForPublic
     */
    mainRole: string;
}

/**
 * Check if a given object implements the ChastikeyStatsForPublic interface.
 */
export function instanceOfChastikeyStatsForPublic(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "totalLocksManaged" in value;
    isInstance = isInstance && "cumulativeSecondsLocked" in value;
    isInstance = isInstance && "averageTimeLockedInSeconds" in value;
    isInstance = isInstance && "longestCompletedLockInSeconds" in value;
    isInstance = isInstance && "totalNoOfCompletedLocks" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "mainRole" in value;

    return isInstance;
}

export function ChastikeyStatsForPublicFromJSON(json: any): ChastikeyStatsForPublic {
    return ChastikeyStatsForPublicFromJSONTyped(json, false);
}

export function ChastikeyStatsForPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChastikeyStatsForPublic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['_id'],
        'totalLocksManaged': json['totalLocksManaged'],
        'cumulativeSecondsLocked': json['cumulativeSecondsLocked'],
        'averageTimeLockedInSeconds': json['averageTimeLockedInSeconds'],
        'longestCompletedLockInSeconds': json['longestCompletedLockInSeconds'],
        'totalNoOfCompletedLocks': json['totalNoOfCompletedLocks'],
        'username': json['username'],
        'mainRole': json['mainRole'],
    };
}

export function ChastikeyStatsForPublicToJSON(value?: ChastikeyStatsForPublic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_id': value.id,
        'totalLocksManaged': value.totalLocksManaged,
        'cumulativeSecondsLocked': value.cumulativeSecondsLocked,
        'averageTimeLockedInSeconds': value.averageTimeLockedInSeconds,
        'longestCompletedLockInSeconds': value.longestCompletedLockInSeconds,
        'totalNoOfCompletedLocks': value.totalNoOfCompletedLocks,
        'username': value.username,
        'mainRole': value.mainRole,
    };
}

