/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LockExtensionConfigDto } from './LockExtensionConfigDto';
import {
    LockExtensionConfigDtoFromJSON,
    LockExtensionConfigDtoFromJSONTyped,
    LockExtensionConfigDtoToJSON,
} from './LockExtensionConfigDto';

/**
 * 
 * @export
 * @interface CreateLockDto
 */
export interface CreateLockDto {
    /**
     * Min duration in seconds
     * @type {number}
     * @memberof CreateLockDto
     */
    minDuration: number;
    /**
     * Max duration in seconds
     * @type {number}
     * @memberof CreateLockDto
     */
    maxDuration: number;
    /**
     * Max limit duration in seconds
     * @type {number}
     * @memberof CreateLockDto
     */
    maxLimitDuration: number | null;
    /**
     * True if the user can view the remaining time
     * @type {boolean}
     * @memberof CreateLockDto
     */
    displayRemainingTime: boolean;
    /**
     * True if the lock is limited in duration
     * @type {boolean}
     * @memberof CreateLockDto
     */
    limitLockTime: boolean;
    /**
     * The combination id

A combination object can be created by using the combination endpoints.
     * @type {string}
     * @memberof CreateLockDto
     */
    combinationId: string;
    /**
     * 
     * @type {Array<LockExtensionConfigDto>}
     * @memberof CreateLockDto
     */
    extensions: Array<LockExtensionConfigDto>;
    /**
     * True if the wearer can offer the lock to a keyholder
     * @type {boolean}
     * @memberof CreateLockDto
     */
    allowSessionOffer: boolean;
    /**
     * Whether the lock is a test lock and counts in the user stats
     * @type {boolean}
     * @memberof CreateLockDto
     */
    isTestLock: boolean;
    /**
     * True if the time information should be hidden from the history
     * @type {boolean}
     * @memberof CreateLockDto
     */
    hideTimeLogs: boolean;
}

/**
 * Check if a given object implements the CreateLockDto interface.
 */
export function instanceOfCreateLockDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "minDuration" in value;
    isInstance = isInstance && "maxDuration" in value;
    isInstance = isInstance && "maxLimitDuration" in value;
    isInstance = isInstance && "displayRemainingTime" in value;
    isInstance = isInstance && "limitLockTime" in value;
    isInstance = isInstance && "combinationId" in value;
    isInstance = isInstance && "extensions" in value;
    isInstance = isInstance && "allowSessionOffer" in value;
    isInstance = isInstance && "isTestLock" in value;
    isInstance = isInstance && "hideTimeLogs" in value;

    return isInstance;
}

export function CreateLockDtoFromJSON(json: any): CreateLockDto {
    return CreateLockDtoFromJSONTyped(json, false);
}

export function CreateLockDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateLockDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'minDuration': json['minDuration'],
        'maxDuration': json['maxDuration'],
        'maxLimitDuration': json['maxLimitDuration'],
        'displayRemainingTime': json['displayRemainingTime'],
        'limitLockTime': json['limitLockTime'],
        'combinationId': json['combinationId'],
        'extensions': ((json['extensions'] as Array<any>).map(LockExtensionConfigDtoFromJSON)),
        'allowSessionOffer': json['allowSessionOffer'],
        'isTestLock': json['isTestLock'],
        'hideTimeLogs': json['hideTimeLogs'],
    };
}

export function CreateLockDtoToJSON(value?: CreateLockDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'minDuration': value.minDuration,
        'maxDuration': value.maxDuration,
        'maxLimitDuration': value.maxLimitDuration,
        'displayRemainingTime': value.displayRemainingTime,
        'limitLockTime': value.limitLockTime,
        'combinationId': value.combinationId,
        'extensions': ((value.extensions as Array<any>).map(LockExtensionConfigDtoToJSON)),
        'allowSessionOffer': value.allowSessionOffer,
        'isTestLock': value.isTestLock,
        'hideTimeLogs': value.hideTimeLogs,
    };
}

