/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LockExtensionConfigDto
 */
export interface LockExtensionConfigDto {
    /**
     * The extension slug. 
     * @type {string}
     * @memberof LockExtensionConfigDto
     */
    slug: string;
    /**
     * The extension configuration. 
     * @type {object}
     * @memberof LockExtensionConfigDto
     */
    config: object;
    /**
     * 
     * @type {string}
     * @memberof LockExtensionConfigDto
     */
    partnerConfigurationToken?: string;
    /**
     * 
     * @type {string}
     * @memberof LockExtensionConfigDto
     */
    mode: LockExtensionConfigDtoModeEnum;
    /**
     * 
     * @type {number}
     * @memberof LockExtensionConfigDto
     */
    regularity: number;
}


/**
 * @export
 */
export const LockExtensionConfigDtoModeEnum = {
    Cumulative: 'cumulative',
    NonCumulative: 'non_cumulative',
    Turn: 'turn',
    Unlimited: 'unlimited'
} as const;
export type LockExtensionConfigDtoModeEnum = typeof LockExtensionConfigDtoModeEnum[keyof typeof LockExtensionConfigDtoModeEnum];


/**
 * Check if a given object implements the LockExtensionConfigDto interface.
 */
export function instanceOfLockExtensionConfigDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "config" in value;
    isInstance = isInstance && "mode" in value;
    isInstance = isInstance && "regularity" in value;

    return isInstance;
}

export function LockExtensionConfigDtoFromJSON(json: any): LockExtensionConfigDto {
    return LockExtensionConfigDtoFromJSONTyped(json, false);
}

export function LockExtensionConfigDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LockExtensionConfigDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'slug': json['slug'],
        'config': json['config'],
        'partnerConfigurationToken': !exists(json, 'partnerConfigurationToken') ? undefined : json['partnerConfigurationToken'],
        'mode': json['mode'],
        'regularity': json['regularity'],
    };
}

export function LockExtensionConfigDtoToJSON(value?: LockExtensionConfigDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'slug': value.slug,
        'config': value.config,
        'partnerConfigurationToken': value.partnerConfigurationToken,
        'mode': value.mode,
        'regularity': value.regularity,
    };
}

