/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExtensionForPublic
 */
export interface ExtensionForPublic {
    /**
     * The extension configuration. 
     * @type {object}
     * @memberof ExtensionForPublic
     */
    defaultConfig: object;
    /**
     * 
     * @type {string}
     * @memberof ExtensionForPublic
     */
    partnerExtensionId: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExtensionForPublic
     */
    configIframeUrl: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionForPublic
     */
    isTesting: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionForPublic
     */
    isPartner: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionForPublic
     */
    isDevelopedByCommunity: boolean;
    /**
     * The extension subtitle
     * @type {string}
     * @memberof ExtensionForPublic
     */
    subtitle: string;
    /**
     * The extension summary
     * @type {string}
     * @memberof ExtensionForPublic
     */
    summary: string;
    /**
     * The name displayed to the end users
     * @type {string}
     * @memberof ExtensionForPublic
     */
    displayName: string;
    /**
     * The extension icon
     * @type {string}
     * @memberof ExtensionForPublic
     */
    icon: string;
    /**
     * The extension slug
     * @type {string}
     * @memberof ExtensionForPublic
     */
    slug: string;
    /**
     * Available modes
     * @type {Array<string>}
     * @memberof ExtensionForPublic
     */
    availableModes: Array<ExtensionForPublicAvailableModesEnum>;
    /**
     * Default regularity
     * @type {number}
     * @memberof ExtensionForPublic
     */
    defaultRegularity: number;
    /**
     * TWhether the extension is enabled
     * @type {boolean}
     * @memberof ExtensionForPublic
     */
    isEnabled: boolean;
    /**
     * Whether the extension is only available to Premium users
     * @type {boolean}
     * @memberof ExtensionForPublic
     */
    isPremium: boolean;
    /**
     * Whether the extension is displayed by default in the list
     * @type {boolean}
     * @memberof ExtensionForPublic
     */
    isFeatured: boolean;
    /**
     * Whether the extension is counted in the extensions limit
     * @type {boolean}
     * @memberof ExtensionForPublic
     */
    isCountedInExtensionsLimit: boolean;
    /**
     * Whether the extension has actions
     * @type {boolean}
     * @memberof ExtensionForPublic
     */
    hasActions: boolean;
}


/**
 * @export
 */
export const ExtensionForPublicAvailableModesEnum = {
    Cumulative: 'cumulative',
    NonCumulative: 'non_cumulative',
    Turn: 'turn',
    Unlimited: 'unlimited'
} as const;
export type ExtensionForPublicAvailableModesEnum = typeof ExtensionForPublicAvailableModesEnum[keyof typeof ExtensionForPublicAvailableModesEnum];


/**
 * Check if a given object implements the ExtensionForPublic interface.
 */
export function instanceOfExtensionForPublic(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "defaultConfig" in value;
    isInstance = isInstance && "partnerExtensionId" in value;
    isInstance = isInstance && "configIframeUrl" in value;
    isInstance = isInstance && "isTesting" in value;
    isInstance = isInstance && "isPartner" in value;
    isInstance = isInstance && "isDevelopedByCommunity" in value;
    isInstance = isInstance && "subtitle" in value;
    isInstance = isInstance && "summary" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "availableModes" in value;
    isInstance = isInstance && "defaultRegularity" in value;
    isInstance = isInstance && "isEnabled" in value;
    isInstance = isInstance && "isPremium" in value;
    isInstance = isInstance && "isFeatured" in value;
    isInstance = isInstance && "isCountedInExtensionsLimit" in value;
    isInstance = isInstance && "hasActions" in value;

    return isInstance;
}

export function ExtensionForPublicFromJSON(json: any): ExtensionForPublic {
    return ExtensionForPublicFromJSONTyped(json, false);
}

export function ExtensionForPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionForPublic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'defaultConfig': json['defaultConfig'],
        'partnerExtensionId': json['partnerExtensionId'],
        'configIframeUrl': json['configIframeUrl'],
        'isTesting': json['isTesting'],
        'isPartner': json['isPartner'],
        'isDevelopedByCommunity': json['isDevelopedByCommunity'],
        'subtitle': json['subtitle'],
        'summary': json['summary'],
        'displayName': json['displayName'],
        'icon': json['icon'],
        'slug': json['slug'],
        'availableModes': json['availableModes'],
        'defaultRegularity': json['defaultRegularity'],
        'isEnabled': json['isEnabled'],
        'isPremium': json['isPremium'],
        'isFeatured': json['isFeatured'],
        'isCountedInExtensionsLimit': json['isCountedInExtensionsLimit'],
        'hasActions': json['hasActions'],
    };
}

export function ExtensionForPublicToJSON(value?: ExtensionForPublic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'defaultConfig': value.defaultConfig,
        'partnerExtensionId': value.partnerExtensionId,
        'configIframeUrl': value.configIframeUrl,
        'isTesting': value.isTesting,
        'isPartner': value.isPartner,
        'isDevelopedByCommunity': value.isDevelopedByCommunity,
        'subtitle': value.subtitle,
        'summary': value.summary,
        'displayName': value.displayName,
        'icon': value.icon,
        'slug': value.slug,
        'availableModes': value.availableModes,
        'defaultRegularity': value.defaultRegularity,
        'isEnabled': value.isEnabled,
        'isPremium': value.isPremium,
        'isFeatured': value.isFeatured,
        'isCountedInExtensionsLimit': value.isCountedInExtensionsLimit,
        'hasActions': value.hasActions,
    };
}

