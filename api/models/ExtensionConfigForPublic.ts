/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExtensionConfigForPublic
 */
export interface ExtensionConfigForPublic {
    /**
     * The extension slug. 
     * @type {string}
     * @memberof ExtensionConfigForPublic
     */
    slug: string;
    /**
     * The extension configuration. 
     * @type {object}
     * @memberof ExtensionConfigForPublic
     */
    config: object;
    /**
     * 
     * @type {string}
     * @memberof ExtensionConfigForPublic
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionConfigForPublic
     */
    textConfig?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionConfigForPublic
     */
    mode: ExtensionConfigForPublicModeEnum;
    /**
     * 
     * @type {number}
     * @memberof ExtensionConfigForPublic
     */
    regularity: number;
}


/**
 * @export
 */
export const ExtensionConfigForPublicModeEnum = {
    Cumulative: 'cumulative',
    NonCumulative: 'non_cumulative',
    Turn: 'turn',
    Unlimited: 'unlimited'
} as const;
export type ExtensionConfigForPublicModeEnum = typeof ExtensionConfigForPublicModeEnum[keyof typeof ExtensionConfigForPublicModeEnum];


/**
 * Check if a given object implements the ExtensionConfigForPublic interface.
 */
export function instanceOfExtensionConfigForPublic(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "config" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "mode" in value;
    isInstance = isInstance && "regularity" in value;

    return isInstance;
}

export function ExtensionConfigForPublicFromJSON(json: any): ExtensionConfigForPublic {
    return ExtensionConfigForPublicFromJSONTyped(json, false);
}

export function ExtensionConfigForPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionConfigForPublic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'slug': json['slug'],
        'config': json['config'],
        'name': json['name'],
        'textConfig': !exists(json, 'textConfig') ? undefined : json['textConfig'],
        'mode': json['mode'],
        'regularity': json['regularity'],
    };
}

export function ExtensionConfigForPublicToJSON(value?: ExtensionConfigForPublic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'slug': value.slug,
        'config': value.config,
        'name': value.name,
        'textConfig': value.textConfig,
        'mode': value.mode,
        'regularity': value.regularity,
    };
}

