/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AppSettingsDtoCommunityEvent } from './AppSettingsDtoCommunityEvent';
import {
    AppSettingsDtoCommunityEventFromJSON,
    AppSettingsDtoCommunityEventFromJSONTyped,
    AppSettingsDtoCommunityEventToJSON,
} from './AppSettingsDtoCommunityEvent';
import type { FeatureSwitchEnum } from './FeatureSwitchEnum';
import {
    FeatureSwitchEnumFromJSON,
    FeatureSwitchEnumFromJSONTyped,
    FeatureSwitchEnumToJSON,
} from './FeatureSwitchEnum';

/**
 * 
 * @export
 * @interface AppSettingsDto
 */
export interface AppSettingsDto {
    /**
     * Global features
     * @type {Array<FeatureSwitchEnum>}
     * @memberof AppSettingsDto
     */
    features: Array<FeatureSwitchEnum>;
    /**
     * The maximum number of locks allowed for a non-premium user
     * @type {number}
     * @memberof AppSettingsDto
     */
    nonPremiumMaxLocks: number;
    /**
     * The maximum number of extensions allowed for a non-premium user
     * @type {number}
     * @memberof AppSettingsDto
     */
    nonPremiumMaxExtensions: number;
    /**
     * Maximum number of attachments per upload
     * @type {number}
     * @memberof AppSettingsDto
     */
    maxAttachments: number;
    /**
     * True if the instance requires an access key
     * @type {boolean}
     * @memberof AppSettingsDto
     */
    registerRequiresAccessKey: boolean;
    /**
     * The recaptcha client key
     * @type {string}
     * @memberof AppSettingsDto
     */
    recaptchaClientKey: string;
    /**
     * The server time
     * @type {Date}
     * @memberof AppSettingsDto
     */
    time: Date;
    /**
     * The app version
     * @type {string}
     * @memberof AppSettingsDto
     */
    version: string;
    /**
     * 
     * @type {AppSettingsDtoCommunityEvent}
     * @memberof AppSettingsDto
     */
    communityEvent: AppSettingsDtoCommunityEvent | null;
}

/**
 * Check if a given object implements the AppSettingsDto interface.
 */
export function instanceOfAppSettingsDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "features" in value;
    isInstance = isInstance && "nonPremiumMaxLocks" in value;
    isInstance = isInstance && "nonPremiumMaxExtensions" in value;
    isInstance = isInstance && "maxAttachments" in value;
    isInstance = isInstance && "registerRequiresAccessKey" in value;
    isInstance = isInstance && "recaptchaClientKey" in value;
    isInstance = isInstance && "time" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "communityEvent" in value;

    return isInstance;
}

export function AppSettingsDtoFromJSON(json: any): AppSettingsDto {
    return AppSettingsDtoFromJSONTyped(json, false);
}

export function AppSettingsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppSettingsDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'features': ((json['features'] as Array<any>).map(FeatureSwitchEnumFromJSON)),
        'nonPremiumMaxLocks': json['nonPremiumMaxLocks'],
        'nonPremiumMaxExtensions': json['nonPremiumMaxExtensions'],
        'maxAttachments': json['maxAttachments'],
        'registerRequiresAccessKey': json['registerRequiresAccessKey'],
        'recaptchaClientKey': json['recaptchaClientKey'],
        'time': (new Date(json['time'])),
        'version': json['version'],
        'communityEvent': AppSettingsDtoCommunityEventFromJSON(json['communityEvent']),
    };
}

export function AppSettingsDtoToJSON(value?: AppSettingsDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'features': ((value.features as Array<any>).map(FeatureSwitchEnumToJSON)),
        'nonPremiumMaxLocks': value.nonPremiumMaxLocks,
        'nonPremiumMaxExtensions': value.nonPremiumMaxExtensions,
        'maxAttachments': value.maxAttachments,
        'registerRequiresAccessKey': value.registerRequiresAccessKey,
        'recaptchaClientKey': value.recaptchaClientKey,
        'time': (value.time.toISOString()),
        'version': value.version,
        'communityEvent': AppSettingsDtoCommunityEventToJSON(value.communityEvent),
    };
}

