/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConversationForPublicLastMessage } from './ConversationForPublicLastMessage';
import {
    ConversationForPublicLastMessageFromJSON,
    ConversationForPublicLastMessageFromJSONTyped,
    ConversationForPublicLastMessageToJSON,
} from './ConversationForPublicLastMessage';
import type { UserForPublic } from './UserForPublic';
import {
    UserForPublicFromJSON,
    UserForPublicFromJSONTyped,
    UserForPublicToJSON,
} from './UserForPublic';

/**
 * 
 * @export
 * @interface ConversationForPublic
 */
export interface ConversationForPublic {
    /**
     * The conversation id
     * @type {string}
     * @memberof ConversationForPublic
     */
    id: string;
    /**
     * List of users who are part of the conversation
     * @type {Array<UserForPublic>}
     * @memberof ConversationForPublic
     */
    users: Array<UserForPublic>;
    /**
     * 
     * @type {ConversationForPublicLastMessage}
     * @memberof ConversationForPublic
     */
    lastMessage?: ConversationForPublicLastMessage;
    /**
     * Is the conversation unread
     * @type {boolean}
     * @memberof ConversationForPublic
     */
    unread: boolean;
    /**
     * Conversation status
     * @type {string}
     * @memberof ConversationForPublic
     */
    status: ConversationForPublicStatusEnum;
    /**
     * Created at
     * @type {Date}
     * @memberof ConversationForPublic
     */
    createdAt: Date;
    /**
     * Last message at
     * @type {Date}
     * @memberof ConversationForPublic
     */
    lastMessageAt: Date;
    /**
     * Whether the user is part of the conversation
     * @type {boolean}
     * @memberof ConversationForPublic
     */
    isMember: boolean;
    /**
     * Whether the sender is banned
     * @type {boolean}
     * @memberof ConversationForPublic
     */
    isSenderBanned: boolean;
    /**
     * The conversation type
     * @type {string}
     * @memberof ConversationForPublic
     */
    type: ConversationForPublicTypeEnum;
}


/**
 * @export
 */
export const ConversationForPublicStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Ignored: 'ignored'
} as const;
export type ConversationForPublicStatusEnum = typeof ConversationForPublicStatusEnum[keyof typeof ConversationForPublicStatusEnum];

/**
 * @export
 */
export const ConversationForPublicTypeEnum = {
    Private: 'private',
    Group: 'group'
} as const;
export type ConversationForPublicTypeEnum = typeof ConversationForPublicTypeEnum[keyof typeof ConversationForPublicTypeEnum];


/**
 * Check if a given object implements the ConversationForPublic interface.
 */
export function instanceOfConversationForPublic(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "users" in value;
    isInstance = isInstance && "unread" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "lastMessageAt" in value;
    isInstance = isInstance && "isMember" in value;
    isInstance = isInstance && "isSenderBanned" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ConversationForPublicFromJSON(json: any): ConversationForPublic {
    return ConversationForPublicFromJSONTyped(json, false);
}

export function ConversationForPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationForPublic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['_id'],
        'users': ((json['users'] as Array<any>).map(UserForPublicFromJSON)),
        'lastMessage': !exists(json, 'lastMessage') ? undefined : ConversationForPublicLastMessageFromJSON(json['lastMessage']),
        'unread': json['unread'],
        'status': json['status'],
        'createdAt': (new Date(json['createdAt'])),
        'lastMessageAt': (new Date(json['lastMessageAt'])),
        'isMember': json['isMember'],
        'isSenderBanned': json['isSenderBanned'],
        'type': json['type'],
    };
}

export function ConversationForPublicToJSON(value?: ConversationForPublic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_id': value.id,
        'users': ((value.users as Array<any>).map(UserForPublicToJSON)),
        'lastMessage': ConversationForPublicLastMessageToJSON(value.lastMessage),
        'unread': value.unread,
        'status': value.status,
        'createdAt': (value.createdAt.toISOString()),
        'lastMessageAt': (value.lastMessageAt.toISOString()),
        'isMember': value.isMember,
        'isSenderBanned': value.isSenderBanned,
        'type': value.type,
    };
}

