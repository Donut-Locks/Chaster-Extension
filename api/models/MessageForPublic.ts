/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AppFileForPublic } from './AppFileForPublic';
import {
    AppFileForPublicFromJSON,
    AppFileForPublicFromJSONTyped,
    AppFileForPublicToJSON,
} from './AppFileForPublic';

/**
 * 
 * @export
 * @interface MessageForPublic
 */
export interface MessageForPublic {
    /**
     * The message id
     * @type {string}
     * @memberof MessageForPublic
     */
    id: string;
    /**
     * The sender id
     * @type {string}
     * @memberof MessageForPublic
     */
    user: string;
    /**
     * Message attachments
     * @type {Array<AppFileForPublic>}
     * @memberof MessageForPublic
     */
    attachments: Array<AppFileForPublic>;
    /**
     * The conversation id
     * @type {string}
     * @memberof MessageForPublic
     */
    conversation: string;
    /**
     * Created at
     * @type {Date}
     * @memberof MessageForPublic
     */
    createdAt: Date;
    /**
     * Updated at
     * @type {Date}
     * @memberof MessageForPublic
     */
    updatedAt: Date;
    /**
     * Nonce

Is present only in the return of the websocket during the creation of the
message, for the sender.
     * @type {string}
     * @memberof MessageForPublic
     */
    nonce?: string;
    /**
     * The message type
     * @type {string}
     * @memberof MessageForPublic
     */
    type: MessageForPublicTypeEnum;
    /**
     * The message content
     * @type {string}
     * @memberof MessageForPublic
     */
    message: string;
}


/**
 * @export
 */
export const MessageForPublicTypeEnum = {
    Message: 'message',
    Log: 'log'
} as const;
export type MessageForPublicTypeEnum = typeof MessageForPublicTypeEnum[keyof typeof MessageForPublicTypeEnum];


/**
 * Check if a given object implements the MessageForPublic interface.
 */
export function instanceOfMessageForPublic(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "attachments" in value;
    isInstance = isInstance && "conversation" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function MessageForPublicFromJSON(json: any): MessageForPublic {
    return MessageForPublicFromJSONTyped(json, false);
}

export function MessageForPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageForPublic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['_id'],
        'user': json['user'],
        'attachments': ((json['attachments'] as Array<any>).map(AppFileForPublicFromJSON)),
        'conversation': json['conversation'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'nonce': !exists(json, 'nonce') ? undefined : json['nonce'],
        'type': json['type'],
        'message': json['message'],
    };
}

export function MessageForPublicToJSON(value?: MessageForPublic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_id': value.id,
        'user': value.user,
        'attachments': ((value.attachments as Array<any>).map(AppFileForPublicToJSON)),
        'conversation': value.conversation,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'nonce': value.nonce,
        'type': value.type,
        'message': value.message,
    };
}

