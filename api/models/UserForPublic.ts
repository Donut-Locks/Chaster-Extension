/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FeatureSwitchEnum } from './FeatureSwitchEnum';
import {
    FeatureSwitchEnumFromJSON,
    FeatureSwitchEnumFromJSONTyped,
    FeatureSwitchEnumToJSON,
} from './FeatureSwitchEnum';
import type { UserForPublicMetadata } from './UserForPublicMetadata';
import {
    UserForPublicMetadataFromJSON,
    UserForPublicMetadataFromJSONTyped,
    UserForPublicMetadataToJSON,
} from './UserForPublicMetadata';
import type { UserRoleEnum } from './UserRoleEnum';
import {
    UserRoleEnumFromJSON,
    UserRoleEnumFromJSONTyped,
    UserRoleEnumToJSON,
} from './UserRoleEnum';

/**
 * 
 * @export
 * @interface UserForPublic
 */
export interface UserForPublic {
    /**
     * 
     * @type {UserRoleEnum}
     * @memberof UserForPublic
     */
    role: UserRoleEnum;
    /**
     * Enabled features
     * @type {Array<FeatureSwitchEnum>}
     * @memberof UserForPublic
     */
    features: Array<FeatureSwitchEnum>;
    /**
     * The user id
     * @type {string}
     * @memberof UserForPublic
     */
    id: string;
    /**
     * The username
     * @type {string}
     * @memberof UserForPublic
     */
    username: string;
    /**
     * Whether the user has a Premium subscription
     * @type {boolean}
     * @memberof UserForPublic
     */
    isPremium: boolean;
    /**
     * The profile description
     * @type {string}
     * @memberof UserForPublic
     */
    description: string;
    /**
     * The location
     * @type {string}
     * @memberof UserForPublic
     */
    location: string;
    /**
     * The gender
     * @type {string}
     * @memberof UserForPublic
     */
    gender: string;
    /**
     * The age
     * @type {number}
     * @memberof UserForPublic
     */
    age?: number;
    /**
     * Whether the user is a findom
     * @type {boolean}
     * @memberof UserForPublic
     */
    isFindom: boolean;
    /**
     * The avatar URL
     * @type {string}
     * @memberof UserForPublic
     */
    avatarUrl: string;
    /**
     * Whether the user is online
     * @type {boolean}
     * @memberof UserForPublic
     */
    online: boolean;
    /**
     * User last seen, in seconds
     * @type {number}
     * @memberof UserForPublic
     */
    lastSeen: number | null;
    /**
     * Whether the user is an admin
     * @type {boolean}
     * @memberof UserForPublic
     */
    isAdmin: boolean;
    /**
     * Whether the user is a moderator
     * @type {boolean}
     * @memberof UserForPublic
     */
    isModerator: boolean;
    /**
     * 
     * @type {UserForPublicMetadata}
     * @memberof UserForPublic
     */
    metadata: UserForPublicMetadata;
    /**
     * User full location
     * @type {string}
     * @memberof UserForPublic
     */
    fullLocation: string;
    /**
     * The Discord ID
     * @type {string}
     * @memberof UserForPublic
     */
    discordId?: string;
    /**
     * The Discord username
     * @type {string}
     * @memberof UserForPublic
     */
    discordUsername?: string;
    /**
     * Whether the user is disabled
     * @type {boolean}
     * @memberof UserForPublic
     */
    isDisabled: boolean;
    /**
     * Whether the user is suspended by the Chaster team
     * @type {boolean}
     * @memberof UserForPublic
     */
    isSuspended: boolean;
    /**
     * Joined date (year and month, YYYY-MM)
     * @type {string}
     * @memberof UserForPublic
     */
    joinedAt: string;
    /**
     * Whether the user is a new member
     * @type {boolean}
     * @memberof UserForPublic
     */
    isNewMember: boolean;
    /**
     * Whether the user is suspended or disabled
     * @type {boolean}
     * @memberof UserForPublic
     */
    isSuspendedOrDisabled: boolean;
}

/**
 * Check if a given object implements the UserForPublic interface.
 */
export function instanceOfUserForPublic(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "role" in value;
    isInstance = isInstance && "features" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "isPremium" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "location" in value;
    isInstance = isInstance && "gender" in value;
    isInstance = isInstance && "isFindom" in value;
    isInstance = isInstance && "avatarUrl" in value;
    isInstance = isInstance && "online" in value;
    isInstance = isInstance && "lastSeen" in value;
    isInstance = isInstance && "isAdmin" in value;
    isInstance = isInstance && "isModerator" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "fullLocation" in value;
    isInstance = isInstance && "isDisabled" in value;
    isInstance = isInstance && "isSuspended" in value;
    isInstance = isInstance && "joinedAt" in value;
    isInstance = isInstance && "isNewMember" in value;
    isInstance = isInstance && "isSuspendedOrDisabled" in value;

    return isInstance;
}

export function UserForPublicFromJSON(json: any): UserForPublic {
    return UserForPublicFromJSONTyped(json, false);
}

export function UserForPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserForPublic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'role': UserRoleEnumFromJSON(json['role']),
        'features': ((json['features'] as Array<any>).map(FeatureSwitchEnumFromJSON)),
        'id': json['_id'],
        'username': json['username'],
        'isPremium': json['isPremium'],
        'description': json['description'],
        'location': json['location'],
        'gender': json['gender'],
        'age': !exists(json, 'age') ? undefined : json['age'],
        'isFindom': json['isFindom'],
        'avatarUrl': json['avatarUrl'],
        'online': json['online'],
        'lastSeen': json['lastSeen'],
        'isAdmin': json['isAdmin'],
        'isModerator': json['isModerator'],
        'metadata': UserForPublicMetadataFromJSON(json['metadata']),
        'fullLocation': json['fullLocation'],
        'discordId': !exists(json, 'discordId') ? undefined : json['discordId'],
        'discordUsername': !exists(json, 'discordUsername') ? undefined : json['discordUsername'],
        'isDisabled': json['isDisabled'],
        'isSuspended': json['isSuspended'],
        'joinedAt': json['joinedAt'],
        'isNewMember': json['isNewMember'],
        'isSuspendedOrDisabled': json['isSuspendedOrDisabled'],
    };
}

export function UserForPublicToJSON(value?: UserForPublic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'role': UserRoleEnumToJSON(value.role),
        'features': ((value.features as Array<any>).map(FeatureSwitchEnumToJSON)),
        '_id': value.id,
        'username': value.username,
        'isPremium': value.isPremium,
        'description': value.description,
        'location': value.location,
        'gender': value.gender,
        'age': value.age,
        'isFindom': value.isFindom,
        'avatarUrl': value.avatarUrl,
        'online': value.online,
        'lastSeen': value.lastSeen,
        'isAdmin': value.isAdmin,
        'isModerator': value.isModerator,
        'metadata': UserForPublicMetadataToJSON(value.metadata),
        'fullLocation': value.fullLocation,
        'discordId': value.discordId,
        'discordUsername': value.discordUsername,
        'isDisabled': value.isDisabled,
        'isSuspended': value.isSuspended,
        'joinedAt': value.joinedAt,
        'isNewMember': value.isNewMember,
        'isSuspendedOrDisabled': value.isSuspendedOrDisabled,
    };
}

