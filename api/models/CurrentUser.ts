/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrentUserForProfileSettingsCountry } from './CurrentUserForProfileSettingsCountry';
import {
    CurrentUserForProfileSettingsCountryFromJSON,
    CurrentUserForProfileSettingsCountryFromJSONTyped,
    CurrentUserForProfileSettingsCountryToJSON,
} from './CurrentUserForProfileSettingsCountry';
import type { CurrentUserForProfileSettingsMetadata } from './CurrentUserForProfileSettingsMetadata';
import {
    CurrentUserForProfileSettingsMetadataFromJSON,
    CurrentUserForProfileSettingsMetadataFromJSONTyped,
    CurrentUserForProfileSettingsMetadataToJSON,
} from './CurrentUserForProfileSettingsMetadata';
import type { CurrentUserForProfileSettingsPrivateMetadata } from './CurrentUserForProfileSettingsPrivateMetadata';
import {
    CurrentUserForProfileSettingsPrivateMetadataFromJSON,
    CurrentUserForProfileSettingsPrivateMetadataFromJSONTyped,
    CurrentUserForProfileSettingsPrivateMetadataToJSON,
} from './CurrentUserForProfileSettingsPrivateMetadata';
import type { CurrentUserForProfileSettingsRegion } from './CurrentUserForProfileSettingsRegion';
import {
    CurrentUserForProfileSettingsRegionFromJSON,
    CurrentUserForProfileSettingsRegionFromJSONTyped,
    CurrentUserForProfileSettingsRegionToJSON,
} from './CurrentUserForProfileSettingsRegion';
import type { CurrentUserForProfileSettingsSettings } from './CurrentUserForProfileSettingsSettings';
import {
    CurrentUserForProfileSettingsSettingsFromJSON,
    CurrentUserForProfileSettingsSettingsFromJSONTyped,
    CurrentUserForProfileSettingsSettingsToJSON,
} from './CurrentUserForProfileSettingsSettings';
import type { FeatureSwitchEnum } from './FeatureSwitchEnum';
import {
    FeatureSwitchEnumFromJSON,
    FeatureSwitchEnumFromJSONTyped,
    FeatureSwitchEnumToJSON,
} from './FeatureSwitchEnum';

/**
 * 
 * @export
 * @interface CurrentUser
 */
export interface CurrentUser {
    /**
     * Enabled features
     * @type {Array<FeatureSwitchEnum>}
     * @memberof CurrentUser
     */
    features: Array<FeatureSwitchEnum>;
    /**
     * The user id
     * @type {string}
     * @memberof CurrentUser
     */
    id: string;
    /**
     * The avatar URL
     * @type {string}
     * @memberof CurrentUser
     */
    avatarUrl: string;
    /**
     * True if the user is a premium user
     * @type {boolean}
     * @memberof CurrentUser
     */
    isPremium: boolean;
    /**
     * The user Keycloak id
     * @type {string}
     * @memberof CurrentUser
     */
    keycloakId: string;
    /**
     * The username
     * @type {string}
     * @memberof CurrentUser
     */
    username: string;
    /**
     * The email
     * @type {string}
     * @memberof CurrentUser
     */
    email: string;
    /**
     * End date of subscription
     * @type {Date}
     * @memberof CurrentUser
     */
    subscriptionEnd?: Date;
    /**
     * End date of custom subscription
     * @type {Date}
     * @memberof CurrentUser
     */
    customSubscriptionEnd?: Date;
    /**
     * The profile description
     * @type {string}
     * @memberof CurrentUser
     */
    description: string;
    /**
     * The location
     * @type {string}
     * @memberof CurrentUser
     */
    location: string;
    /**
     * The gender
     * @type {string}
     * @memberof CurrentUser
     */
    gender: string;
    /**
     * The birth date
     * @type {Date}
     * @memberof CurrentUser
     */
    birthDate: Date;
    /**
     * The role
     * @type {string}
     * @memberof CurrentUser
     */
    role: CurrentUserRoleEnum;
    /**
     * Whether the email is verified
     * @type {boolean}
     * @memberof CurrentUser
     */
    emailVerified: boolean;
    /**
     * Whether the user is a developer
     * @type {boolean}
     * @memberof CurrentUser
     */
    isDeveloper?: boolean;
    /**
     * Whether the user is a moderator
     * @type {boolean}
     * @memberof CurrentUser
     */
    isModerator?: boolean;
    /**
     * Whether the subscription is canceled after the end date
     * @type {boolean}
     * @memberof CurrentUser
     */
    subscriptionCancelAfterEnd: boolean;
    /**
     * The Discord id
     * @type {string}
     * @memberof CurrentUser
     */
    discordId?: string;
    /**
     * The Discord username
     * @type {string}
     * @memberof CurrentUser
     */
    discordUsername?: string;
    /**
     * Whether the user is an admin
     * @type {boolean}
     * @memberof CurrentUser
     */
    isAdmin?: boolean;
    /**
     * Whether the user is a findom
     * @type {boolean}
     * @memberof CurrentUser
     */
    isFindom: boolean;
    /**
     * 
     * @type {CurrentUserForProfileSettingsSettings}
     * @memberof CurrentUser
     */
    settings: CurrentUserForProfileSettingsSettings;
    /**
     * 
     * @type {CurrentUserForProfileSettingsMetadata}
     * @memberof CurrentUser
     */
    metadata: CurrentUserForProfileSettingsMetadata;
    /**
     * 
     * @type {CurrentUserForProfileSettingsCountry}
     * @memberof CurrentUser
     */
    country: CurrentUserForProfileSettingsCountry;
    /**
     * 
     * @type {CurrentUserForProfileSettingsRegion}
     * @memberof CurrentUser
     */
    region: CurrentUserForProfileSettingsRegion;
    /**
     * 
     * @type {CurrentUserForProfileSettingsPrivateMetadata}
     * @memberof CurrentUser
     */
    privateMetadata: CurrentUserForProfileSettingsPrivateMetadata;
    /**
     * Whether the user has accepted the community rules
     * @type {boolean}
     * @memberof CurrentUser
     */
    hasAcceptedCommunityRules: boolean;
}


/**
 * @export
 */
export const CurrentUserRoleEnum = {
    Keyholder: 'keyholder',
    Wearer: 'wearer',
    Switch: 'switch',
    Unspecified: 'unspecified'
} as const;
export type CurrentUserRoleEnum = typeof CurrentUserRoleEnum[keyof typeof CurrentUserRoleEnum];


/**
 * Check if a given object implements the CurrentUser interface.
 */
export function instanceOfCurrentUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "features" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "avatarUrl" in value;
    isInstance = isInstance && "isPremium" in value;
    isInstance = isInstance && "keycloakId" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "location" in value;
    isInstance = isInstance && "gender" in value;
    isInstance = isInstance && "birthDate" in value;
    isInstance = isInstance && "role" in value;
    isInstance = isInstance && "emailVerified" in value;
    isInstance = isInstance && "subscriptionCancelAfterEnd" in value;
    isInstance = isInstance && "isFindom" in value;
    isInstance = isInstance && "settings" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "country" in value;
    isInstance = isInstance && "region" in value;
    isInstance = isInstance && "privateMetadata" in value;
    isInstance = isInstance && "hasAcceptedCommunityRules" in value;

    return isInstance;
}

export function CurrentUserFromJSON(json: any): CurrentUser {
    return CurrentUserFromJSONTyped(json, false);
}

export function CurrentUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrentUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'features': ((json['features'] as Array<any>).map(FeatureSwitchEnumFromJSON)),
        'id': json['_id'],
        'avatarUrl': json['avatarUrl'],
        'isPremium': json['isPremium'],
        'keycloakId': json['keycloakId'],
        'username': json['username'],
        'email': json['email'],
        'subscriptionEnd': !exists(json, 'subscriptionEnd') ? undefined : (new Date(json['subscriptionEnd'])),
        'customSubscriptionEnd': !exists(json, 'customSubscriptionEnd') ? undefined : (new Date(json['customSubscriptionEnd'])),
        'description': json['description'],
        'location': json['location'],
        'gender': json['gender'],
        'birthDate': (new Date(json['birthDate'])),
        'role': json['role'],
        'emailVerified': json['emailVerified'],
        'isDeveloper': !exists(json, 'isDeveloper') ? undefined : json['isDeveloper'],
        'isModerator': !exists(json, 'isModerator') ? undefined : json['isModerator'],
        'subscriptionCancelAfterEnd': json['subscriptionCancelAfterEnd'],
        'discordId': !exists(json, 'discordId') ? undefined : json['discordId'],
        'discordUsername': !exists(json, 'discordUsername') ? undefined : json['discordUsername'],
        'isAdmin': !exists(json, 'isAdmin') ? undefined : json['isAdmin'],
        'isFindom': json['isFindom'],
        'settings': CurrentUserForProfileSettingsSettingsFromJSON(json['settings']),
        'metadata': CurrentUserForProfileSettingsMetadataFromJSON(json['metadata']),
        'country': CurrentUserForProfileSettingsCountryFromJSON(json['country']),
        'region': CurrentUserForProfileSettingsRegionFromJSON(json['region']),
        'privateMetadata': CurrentUserForProfileSettingsPrivateMetadataFromJSON(json['privateMetadata']),
        'hasAcceptedCommunityRules': json['hasAcceptedCommunityRules'],
    };
}

export function CurrentUserToJSON(value?: CurrentUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'features': ((value.features as Array<any>).map(FeatureSwitchEnumToJSON)),
        '_id': value.id,
        'avatarUrl': value.avatarUrl,
        'isPremium': value.isPremium,
        'keycloakId': value.keycloakId,
        'username': value.username,
        'email': value.email,
        'subscriptionEnd': value.subscriptionEnd === undefined ? undefined : (value.subscriptionEnd.toISOString()),
        'customSubscriptionEnd': value.customSubscriptionEnd === undefined ? undefined : (value.customSubscriptionEnd.toISOString()),
        'description': value.description,
        'location': value.location,
        'gender': value.gender,
        'birthDate': (value.birthDate.toISOString()),
        'role': value.role,
        'emailVerified': value.emailVerified,
        'isDeveloper': value.isDeveloper,
        'isModerator': value.isModerator,
        'subscriptionCancelAfterEnd': value.subscriptionCancelAfterEnd,
        'discordId': value.discordId,
        'discordUsername': value.discordUsername,
        'isAdmin': value.isAdmin,
        'isFindom': value.isFindom,
        'settings': CurrentUserForProfileSettingsSettingsToJSON(value.settings),
        'metadata': CurrentUserForProfileSettingsMetadataToJSON(value.metadata),
        'country': CurrentUserForProfileSettingsCountryToJSON(value.country),
        'region': CurrentUserForProfileSettingsRegionToJSON(value.region),
        'privateMetadata': CurrentUserForProfileSettingsPrivateMetadataToJSON(value.privateMetadata),
        'hasAcceptedCommunityRules': value.hasAcceptedCommunityRules,
    };
}

