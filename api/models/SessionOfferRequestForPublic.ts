/* tslint:disable */
/* eslint-disable */
/**
 * Chaster
 * Chaster Public API  API documentation: [https://docs.chaster.app/api-introduction](https://docs.chaster.app/api-introduction) 
 *
 * The version of the OpenAPI document: 0.12.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserForPublic } from './UserForPublic';
import {
    UserForPublicFromJSON,
    UserForPublicFromJSONTyped,
    UserForPublicToJSON,
} from './UserForPublic';

/**
 * 
 * @export
 * @interface SessionOfferRequestForPublic
 */
export interface SessionOfferRequestForPublic {
    /**
     * 
     * @type {UserForPublic}
     * @memberof SessionOfferRequestForPublic
     */
    keyholder: UserForPublic;
    /**
     * 
     * @type {string}
     * @memberof SessionOfferRequestForPublic
     */
    lock: string;
    /**
     * 
     * @type {string}
     * @memberof SessionOfferRequestForPublic
     */
    status: SessionOfferRequestForPublicStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof SessionOfferRequestForPublic
     */
    validatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SessionOfferRequestForPublic
     */
    archivedAt?: Date;
}


/**
 * @export
 */
export const SessionOfferRequestForPublicStatusEnum = {
    Pending: 'pending',
    Accepted: 'accepted',
    Rejected: 'rejected'
} as const;
export type SessionOfferRequestForPublicStatusEnum = typeof SessionOfferRequestForPublicStatusEnum[keyof typeof SessionOfferRequestForPublicStatusEnum];


/**
 * Check if a given object implements the SessionOfferRequestForPublic interface.
 */
export function instanceOfSessionOfferRequestForPublic(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "keyholder" in value;
    isInstance = isInstance && "lock" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function SessionOfferRequestForPublicFromJSON(json: any): SessionOfferRequestForPublic {
    return SessionOfferRequestForPublicFromJSONTyped(json, false);
}

export function SessionOfferRequestForPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionOfferRequestForPublic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'keyholder': UserForPublicFromJSON(json['keyholder']),
        'lock': json['lock'],
        'status': json['status'],
        'validatedAt': !exists(json, 'validatedAt') ? undefined : (new Date(json['validatedAt'])),
        'archivedAt': !exists(json, 'archivedAt') ? undefined : (new Date(json['archivedAt'])),
    };
}

export function SessionOfferRequestForPublicToJSON(value?: SessionOfferRequestForPublic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'keyholder': UserForPublicToJSON(value.keyholder),
        'lock': value.lock,
        'status': value.status,
        'validatedAt': value.validatedAt === undefined ? undefined : (value.validatedAt.toISOString()),
        'archivedAt': value.archivedAt === undefined ? undefined : (value.archivedAt.toISOString()),
    };
}

